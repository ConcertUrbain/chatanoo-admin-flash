package org.concert_urbain.touratour.models{    import flash.events.Event;    import flash.events.EventDispatcher;        import org.concert_urbain.touratour.api.TAT;    import org.concert_urbain.touratour.api.core.events.ServiceEvent;    import org.concert_urbain.touratour.api.core.requests.AbstractServiceRequest;    import org.concert_urbain.touratour.api.vos.*;    import org.concert_urbain.touratour.api.vos.datas.*;    import org.concert_urbain.touratour.api.vos.medias.*;    import org.concert_urbain.touratour.api.vos.collections.MultiVoCollection;    import org.concert_urbain.touratour.api.vos.collections.VoCollection;    import org.concert_urbain.touratour.api.vos.events.VoEvent;    import org.concert_urbain.touratour.events.*;			public class DatasOfQuery extends EventDispatcher	{			// Evènements		public static const CLEAR:String = "org.concert_urbain.touratour.DatasOfQuery.Clear";		public static const DATAS_LOADED:String = "org.concert_urbain.touratour.DatasOfQuery.DatasLoaded";						// Id de la query		public var queryId:int;				// Mots-clés de la query		public var keywords:Array;		public var type1Keywords:Array;		public var type2Keywords:Array;		public var type3Keywords:Array;				// Centre de la carte		public var cartoVO:CartoData;				// Type de la carte		public var cartoType:String;				// Zoom de la carte		public var cartoZoom:Number;						public function DatasOfQuery()		{			super();						initModel();		}					public function clear():void		{			initModel();						// Reçu par les différentes vues			dispatchEvent(new Event(DatasOfQuery.CLEAR));		}				public function initModel():void		{			keywords = new Array();			type1Keywords = new Array();			type2Keywords = new Array();			type3Keywords = new Array();		}						// --------------------------------------------------------------------		//		// Liste des données d'une query (carto, etc...)		//		// --------------------------------------------------------------------				// 1. Cartographie (position du centre de la carte)				public function loadDatasOfQuery(id:int):void		{			queryId = id;						var ws:TAT = TAT.getInstance();			ws.datasService.getDatasByQueryId(id);			ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery, false, 0, true);			ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError, false, 0, true);		}				public function onLoadDatasOfQueryError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery);			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError);		}				public function onLoadDatasOfQuery(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery);			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError);						var datas:Object = e.result as Object;			if (datas != null)			{				var i:uint;				var dataCarto:Array = datas['Carto'];								if (dataCarto is Array)				{					var n:uint = dataCarto.length;					var dataVO:IVo;										for (i=0; i<n; i++)					{						dataVO = dataCarto[i] as IVo;						if (dataVO is CartoData)						{							// Centre de la carte							cartoVO = dataVO as CartoData;							break;						}					}				}			}						// Chargement des méta-données de la query			loadMetasOfQuery();		}				protected function loadMetasOfQuery():void		{							var ws:TAT = TAT.getInstance();			ws.searchService.getMetasByVo(queryId, "Query");			ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery, false, 0, true);			ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError, false, 0, true);		}				public function onLoadMetasOfQueryError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery);			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError);		}						// 2. Metadonnées		// - Mots-clés		// - Type de carte		// - Zoom de carte				public function onLoadMetasOfQuery(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery);			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError);						var metas:Array = e.result as Array;						if (! keywords) keywords = new Array();						if (! type1Keywords) type1Keywords = new Array();			if (! type2Keywords) type2Keywords = new Array();			if (! type3Keywords) type3Keywords = new Array();									if (metas is Array)			{				var i:uint;				var n:uint = metas.length;				var metaVO:Meta;								for (i=0; i<n; i++)				{					metaVO = metas[i] as Meta;					if (metaVO is Meta)					{						switch (metaVO.name)						{							case "KeyWord":								keywords.push(metaVO);								break;														case "MapType":								cartoType = metaVO.content;								break;														case "MapZoom":								cartoZoom = Number(metaVO.content);								break;															case "Type1KeyWord":								type1Keywords.push(metaVO);								break;														case "Type2KeyWord":								type2Keywords.push(metaVO);								break;														case "Type3KeyWord":								type3Keywords.push(metaVO);								break;						}					}				}			}						//			// Fin des chargements			//						dispatchEvent(new Event(DatasOfQuery.DATAS_LOADED));		}	}}
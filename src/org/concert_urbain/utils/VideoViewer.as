package org.concert_urbain.utils{	import flash.display.Sprite;		import flash.geom.Rectangle;		import flash.net.NetStream;	import flash.net.NetConnection;		import flash.media.Video;	import flash.media.SoundTransform;		import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.ProgressEvent;		import org.concert_urbain.utils.VideoUtils;		public class VideoViewer extends Sprite implements IMediaViewer	{			public var videoUrl:String;		private var videoConstraintRect:Rectangle;				public var video:Video;		public var netStream:NetStream;		public var netConnection:NetConnection;		public var streamSoundTransform:SoundTransform;				public var duration:Number;		public var videoWidth:Number;		public var videoHeight:Number;		public var videoRatio:Number;		public var firstPlay:Boolean;		public var isPlaying:Boolean;				public var autoPlay:Boolean = false;						public function VideoViewer(url:String, constraint:Rectangle = null)		{			firstPlay = true;						videoUrl = url;			videoConstraintRect = constraint;						video = new Video();			video.smoothing = true;			video.alpha = 0;			addChild(video);						netConnection = new NetConnection ()			netConnection.connect(null);			netStream = new NetStream(netConnection);			netStream.addEventListener(NetStatusEvent.NET_STATUS, videoStatus);			streamSoundTransform = new SoundTransform();			netStream.soundTransform = streamSoundTransform;						video.attachNetStream(netStream);						// Renvoi des Meta dans l'objet lui-même :			netStream.client = this; 						// Lancement de la vidéo			netStream.play(videoUrl);		}		protected function videoStatus(stats:NetStatusEvent):void		{            switch (stats.info.code)            {				case "NetStream.Buffer.Full":					break;									case "NetStream.Buffer.Empty":				break;								case "NetStream.Play.Stop":					isPlaying = false;										// Fin de la vidéo :					dispatchEvent(new Event(StreamEvent.STREAM_END));										// Evénements Viewers					dispatchEvent(new Event(ViewerEvents.MEDIA_END));				break;								case "NetStream.Play.Start":								// Début de la vidéo : gestion de l'autoPlay					isPlaying = true				break;				case "NetStream.Play.StreamNotFound":					trace ("[VideoViewer] Loading Error : " + videoUrl)					dispatchEvent(new Event(StreamEvent.STREAM_NOT_FOUND)); 				break;	        }		}				public function onXMPData(info:Object):void		{		}				public function onLastSecond(info:Object):void		{		}				public function onMetaData(meta:Object):void		{			if (firstPlay == true) {								firstPlay=false;								duration = meta.duration;					videoWidth = meta.width;				videoHeight = meta.height;				videoRatio = videoWidth/videoHeight;								if (! isNaN(meta.width)) {					adjustSizeToConstraint();				}								if (autoPlay == false) {					// Mise en pause dès le début de la vidéo (autoplay = false)					pause();					seek(0);					addEventListener(Event.ENTER_FRAME, enterFrameUntilResize, false, 0, true);				}							// Début de la vidéo  (autoplay = true)				dispatchEvent(new Event(StreamEvent.STREAM_START));								// Pour les % de progression				addEventListener(Event.ENTER_FRAME, enterFrameEvent, false, 0, true);								// Evénements Viewers				dispatchEvent(new Event(ViewerEvents.MEDIA_COMPLETE));			}		};				//		// Resize		//				protected function adjustSizeToConstraint():void		{			if (videoConstraintRect is Rectangle)			{				var maxWidth:Number = videoConstraintRect.width;				var maxHeight:Number = videoConstraintRect.height;								// On recherche le scale maximum (selon la hauteur ou la largeur) pour que l'image rentre dans le cadre				var s1:Number = videoWidth / maxWidth;				var s2:Number = videoHeight / maxHeight;								if (s1>s2)				{					// On se cale sur la largeur					video.width = maxWidth;					video.height = video.width / videoRatio;				}				else				{					video.height = maxHeight;					video.width = video.height * videoRatio;				}								// On centre l'image				video.x = (maxWidth - video.width)/2;				video.y = (maxHeight - video.height)/2;			}						video.alpha = 1;		}				protected function enterFrameUntilResize(e:Event):void		{			tryAdjustSizeToConstraint();		}				protected function tryAdjustSizeToConstraint():void		{			if (isNaN(videoWidth) && (video.videoWidth > 0))			{				videoWidth = video.videoWidth;				videoHeight = video.videoHeight;				videoRatio = videoWidth/videoHeight;								adjustSizeToConstraint();								removeEventListener(Event.ENTER_FRAME, enterFrameUntilResize);				video.alpha = 1;			}		}				//		// Events		//				protected function enterFrameEvent(e:Event):void		{			if (netStream is NetStream)			{				tryAdjustSizeToConstraint();								// % chargement				var evt:ProgressEvent = new ProgressEvent(ViewerEvents.MEDIA_LOAD_PROGRESS, false, false, netStream.bytesLoaded, netStream.bytesTotal);				dispatchEvent(evt);								// % avance				evt = new ProgressEvent(ViewerEvents.MEDIA_PROGRESS, false, false, netStream.time, duration);				dispatchEvent(evt);			}		}						//		// Navigation dans la vidéo :		//				public function seek(offset:Number):void		{			if (netStream is NetStream)			{				netStream.seek(offset);			}		}		public function seekPercent(percent:Number):void		{			if (netStream is NetStream)			{				netStream.seek(percent * duration);			}		}				public function pause():void		{					if (netStream is NetStream)			{				isPlaying = false;				netStream.pause();			}		}				public function stop():void		{					if (netStream is NetStream)			{				isPlaying = false;				netStream.seek(0);				netStream.pause();			}		}		public function resume():void		{			if (netStream is NetStream)			{				isPlaying = true;				netStream.resume();			}		}						public function togglePlayPause():void		{			isPlaying ? pause() : resume();		}						//		// Son de la vidéo		//				public function toggleSound():void		{			if (netStream)			{				streamSoundTransform.volume = 0;				netStream.soundTransform = streamSoundTransform;			} else {				streamSoundTransform.volume = 1;				netStream.soundTransform = streamSoundTransform;			}		}				public function setVolume(level:Number):void		{			if (netStream is NetStream)			{				streamSoundTransform.volume = level;				netStream.soundTransform = streamSoundTransform;			}		}				//		// Interface IMediaViewer		//		public function close():void		{			removeEventListener(Event.ENTER_FRAME, enterFrameEvent);							if (video) 			{				video.clear();				video.attachNetStream(null);			}						if (netStream)			{				netStream.removeEventListener(NetStatusEvent.NET_STATUS, videoStatus);				isPlaying = false;				netStream.close();			}						if (netConnection)			{				netConnection.close();			}		}	}}
package org.concert_urbain.touratour.api.services{	import org.concert_urbain.touratour.api.TAT;	import org.concert_urbain.touratour.api.core.requests.UsersServiceRequest;	import org.concert_urbain.touratour.api.vos.User;	import org.concert_urbain.touratour.api.vos.datas.AbstractData;	import org.concert_urbain.touratour.api.vos.Meta;	public class UsersService extends AbstractService	{		public function UsersService()		{			super();		}				public function getUsers():String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.GET_USERS_METHOD);			TAT.getInstance().sendRequest(request);			return request.id;		}				public function getUserById(userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.GET_USER_BY_ID_METHOD);			request.params = [userId];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function getUserByLogin(pseudo:String, pass:String):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.GET_USER_BY_LOGIN_METHOD);			request.params = [pseudo, pass];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function addUser(user:User):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.ADD_USER_METHOD);			request.params = [user];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function setUser(user:User):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.SET_USER_METHOD);			request.params = [user];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function deleteUser(userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.DELETE_USER_METHOD);			request.params = [userId];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function banUser(userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.BAN_USER_METHOD);			request.params = [userId];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function addDataIntoUser(data:AbstractData, userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.ADD_DATA_INTO_USER_METHOD);			request.params = [data, userId];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function removeDataFromUser(dataId:int, dataType:String, userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.REMOVE_DATA_FROM_USER_METHOD);			request.params = [dataId, dataType, userId];			TAT.getInstance().sendRequest(request);			return request.id;		}		/* NEW */				public function setUserPassword(user:User):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.SET_USER_PASSWORD_METHOD);			request.params = [user.id, user.password];			TAT.getInstance().sendRequest(request);			return request.id;		}		/* DENIS */				public function addMetaIntoUser(meta:Meta, userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.ADD_META_INTO_USER_METHOD);			request.params = [meta, userId];			TAT.getInstance().sendRequest(request);			return request.id;		}				public function removeMetaFromUser(metaId:int, userId:int):String		{			var request:UsersServiceRequest = new UsersServiceRequest(UsersServiceRequest.REMOVE_META_FROM_USER_METHOD);			request.params = [metaId, userId];			TAT.getInstance().sendRequest(request);			return request.id;		}					}}
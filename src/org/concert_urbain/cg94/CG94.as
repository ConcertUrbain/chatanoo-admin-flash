package org.concert_urbain.cg94{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import mx.core.UIComponent;		import org.concert_urbain.cg94.view.*;	import org.concert_urbain.utils.*;		import org.concert_urbain.touratour.ProjectsApiKeys;	import org.concert_urbain.touratour.events.*;		import org.concert_urbain.touratour.models.*;	import org.concert_urbain.touratour.models.manager.ModelManager;		import org.concert_urbain.touratour.api.TAT;	import org.concert_urbain.touratour.api.core.events.ServiceEvent;	import org.concert_urbain.touratour.api.core.requests.AbstractServiceRequest;		import org.concert_urbain.touratour.api.vos.*;	import org.concert_urbain.touratour.api.vos.datas.*;	import org.concert_urbain.touratour.api.vos.medias.*;		public class CG94 extends MovieClip	{		// Vue		protected var _view:CG94View;				// WebService JSON		private var loginUIID:String;				// Liste de toutes les queries de l'utilisateur		private var allQueries:AllQueries;				// Données de toutes les queries		private var modelManager:ModelManager;					private var qstQueryId:Array;				// Données de la query courante		private var datasOfQuery:DatasOfQuery;		private var itemsOfQuery:DetailedItemsOfQuery;				// Query sélectionnée		private var queryId:int;				// ItemVO sélectionné		private var currentVO:Item;				// ItemVO playList		private var itemVOPlayList:Array;		private var timeOutPlayList:uint;				// Messages visités		private var visitedMessagesIds:Array;		private var visitedMessagesLastId:int;		// MediaPlayer		private var mediaViewer:MovieClip;		private var baseURL:String = "http://ms.dring93.org/m/";				public function CG94()		{			super();						_view = new CG94View();			addChild(_view);						login();		}						//		// 0. Login		//					private function login():void		{			var ws:TAT = TAT.getInstance();			ws.init(ProjectsApiKeys.WS_URL, ProjectsApiKeys.WS_API_KEY_BonheurBrut);			ws.addEventListener(ServiceEvent.LOGIN_SUCCESS, _loginSuccessHandler);			ws.addEventListener(ServiceEvent.LOGIN_ERROR, _errorHandler);						loginUIID = ws.login(ProjectsApiKeys.ANONYMOUS_LOGIN, ProjectsApiKeys.ANONYMOUS_PASSWORD);		}				private function _errorHandler(event:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.LOGIN_SUCCESS, _loginSuccessHandler);			ws.removeEventListener(ServiceEvent.LOGIN_ERROR, _errorHandler);						trace('ERROR');		}				private function _loginSuccessHandler(event:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.LOGIN_SUCCESS, _loginSuccessHandler);			ws.removeEventListener(ServiceEvent.LOGIN_ERROR, _errorHandler);						if (event.id != loginUIID) return;			// Charge / Stocke les questions de la session			allQueries = new AllQueries();			allQueries.addEventListener(AllQueries.QUERIES_LOADED, onQueriesLoaded, false, 0, true);			allQueries.loadQueries();						// Stocke les données de toutes les questions			modelManager = new ModelManager();						// Liste des messages visités			visitedMessagesIds = new Array();		}		//		// 1. Chargement des questions		//				private function onQueriesLoaded(e:Event):void		{			allQueries.removeEventListener(AllQueries.QUERIES_LOADED, onQueriesLoaded);						// Questions valides			var validQueries:Array = allQueries.validQueries;			var i:uint;			var n:uint = validQueries.length;			var qst:MovieClip;			var queryVO:Query;			var firstQueryId:int = -1;						qstQueryId = new Array();						for(i = 0; i < n; i++)			{				queryVO = validQueries[i];								trace("Query", queryVO.id, queryVO.content);								if (firstQueryId == -1) firstQueryId = queryVO.id;			}						if (firstQueryId != -1) loadQueryId(firstQueryId);		}		//		// 2. Chargement d'une question		//				private function loadQueryId(id:int):void		{			if (queryId != id)			{				// On enlève le player et on efface la référence à la VO courante				closeMediaPlayer();				currentVO = null;				// Id de la nouvelle query				queryId = id;							if (! modelManager.isQueryExists(queryId))				{					// Chargement des datas puis des items					loadDataOfQuery();				}				else				{					// Les données sont déjà stockées					datasOfQuery = modelManager.getDatasOfQuery(queryId);					itemsOfQuery = modelManager.getItemsOfQuery(queryId) as DetailedItemsOfQuery;										initCurrentView();				}			}		}				//		// 2.1. Chargement des meta-données de la question		//				private function loadDataOfQuery():void		{			datasOfQuery = new DatasOfQuery(); 			datasOfQuery.loadDatasOfQuery(queryId);			datasOfQuery.addEventListener(DatasOfQuery.DATAS_LOADED, loadItemsOfQuery);		}		//		// 2.2. Chargement des items de la question		//				private function loadItemsOfQuery(e:Event):void		{			datasOfQuery.removeEventListener(DatasOfQuery.DATAS_LOADED, loadItemsOfQuery);			// Sauvegarde des données			modelManager.saveDatasOfQuery(queryId, datasOfQuery);							itemsOfQuery = new DetailedItemsOfQuery(); 			itemsOfQuery.loadItemsOfQuery(queryId);			itemsOfQuery.addEventListener(ItemsOfQuery.ITEMS_LOADED, onItemsLoaded);			itemsOfQuery.addEventListener(ItemsOfQuery.ITEMS_ERROR, onItemsError);		}				private function onItemsError(e:Event):void		{		}				private function onItemsLoaded(e:Event):void		{			itemsOfQuery.removeEventListener(ItemsOfQuery.ITEMS_LOADED, onItemsLoaded);						// Sauvegarde des données			modelManager.saveItemsOfQuery(queryId, itemsOfQuery);						trace("onItemsLoaded", queryId);						// Apparition initiale des carrés de couleur			initCurrentView();		}		//		// 3. Items 		//				public function initCurrentView():void		{			// Rafraichissement de la vue			_view.initVisitedMessages(visitedMessagesIds, visitedMessagesLastId);			_view.initWithModel(itemsOfQuery);			_view.addEventListener(VOEvent.SELECT, onClickItem, false, 0, true);			_view.addEventListener(VOEvent.MULTIPLE_SELECT, onClickItems, false, 0, true);		}				//		// Evènement suite à un click sur un item dans la vue		//				private function onClickItem(e:VOEvent):void		{			// On supprime la playlist d'item			itemVOPlayList = null;						var itemVO:Item = e.vo as Item;			launchItemInPlayer(itemVO);		}		//		// Evènement suite à un click sur un mot-clé dans la vue (playlist d'items)		//				private function onClickItems(e:ArrayEvent):void		{			var itemsIds:Array = e.array;						if (itemsIds && (itemsIds.length > 0))			{				// Mémorisation de la playList				itemVOPlayList = itemsIds.concat();								// Lancement du premier item				launchNextItemOfPlaylistInPlayer(0);			}		}				private function launchNextItemOfPlaylistInPlayer(delay:Number = 1500):void		{			if (itemVOPlayList is Array)			{				if (itemVOPlayList.length > 0)				{					var itemId:int = itemVOPlayList.shift();					var itemVO:Item = itemsOfQuery.getItemById(itemId);										// TODO					// - Si photo : attendre quelques secondes					// - Si vidéo : lancement de l'itemVO suivant de la playlist					delayLaunchItemInPlayer(itemVO, delay);				}			}		}				private function delayLaunchItemInPlayer(itemVO:Item, delay:Number = 2000):void		{			timeOutPlayList = setTimeout(launchItemInPlayer, delay, itemVO);		}				//		// 4. Item 		//				private function launchItemInPlayer(itemVO:Item):void		{			var itemId:int = itemVO.id;						// On met à jour la liste des messages visités			if (visitedMessagesIds.indexOf(itemId) == -1) visitedMessagesIds.push(itemId);						// Dernier message visité			visitedMessagesLastId = itemId;						// Mise à jour de l'item visité			_view.updateVisited(visitedMessagesLastId);						// Fin du Timer			clearTimeout(timeOutPlayList);						//			// Médias			//						if (itemsOfQuery.getMediasOfItem(itemId) == null) 			{				// Début du chargement des données				itemsOfQuery.loadMediasOfItemId(itemId);				itemsOfQuery.addEventListener(ItemsOfQuery.MEDIAS_LOADED, onDataMediasLoaded);			}			else			{				// Direct				openMediaPlayer(itemVO);			}		}				//		// 5. Gestion du Media		//				// Médias : Fin du chargement des données du serveur		private function onDataMediasLoaded(e:IdEvent):void		{			itemsOfQuery.removeEventListener(ItemsOfQuery.MEDIAS_LOADED, onDataMediasLoaded);						var itemVO:Item = itemsOfQuery.getItemById(e.id);			openMediaPlayer(itemVO);		}				public function openMediaPlayer(itemVO:Item):void		{			currentVO = itemVO;						var mediasOfItem:Array = itemsOfQuery.getMediasOfItem(itemVO.id);			trace("mediasOfItem", mediasOfItem)			/*			TODO MEDIAS PLAYER :			*/		}				public function closeMediaPlayer():void {		}	}}
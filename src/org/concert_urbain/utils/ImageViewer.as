package org.concert_urbain.utils{	import flash.display.Bitmap;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.events.ProgressEvent;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.utils.getTimer;			public class ImageViewer extends Sprite implements IMediaViewer	{		protected var imageUrl:String;		protected var imageLoader:Loader;		protected var imageConstraintRect:Rectangle;		protected var imageTimeOut:Number;		protected var imageTimeIn:Number;		public function ImageViewer(url:String = "", constraint:Rectangle = null, timeOut:Number = 0)		{			imageConstraintRect = constraint;			imageTimeOut = timeOut;						if (url && (url.length > 0))			{				loadURL(url);			}		}				public function loadURL(url:String = ""):void		{			imageUrl = url;						imageLoader = new Loader();			imageLoader.load(new URLRequest(imageUrl));			addChild(imageLoader);						var infos:LoaderInfo = imageLoader.contentLoaderInfo;			infos.addEventListener(Event.INIT, imageLoadingInit);			infos.addEventListener(Event.COMPLETE, imageLoadingComplete);			infos.addEventListener(IOErrorEvent.IO_ERROR, imageLoadingError);			infos.addEventListener(ProgressEvent.PROGRESS, imageLoadingProgress);			infos.addEventListener(SecurityErrorEvent.SECURITY_ERROR, imageSecurityLoadingError);		}				protected function imageLoadingInit (e:Event):void		{			imageLoader.alpha = 0;		}				protected function imageLoadingProgress (e:ProgressEvent):void		{			var evt:ProgressEvent = new ProgressEvent(ViewerEvents.MEDIA_LOAD_PROGRESS, false, false, e.bytesLoaded, e.bytesTotal);			dispatchEvent(evt);		}				protected function imageLoadingComplete (e:Event):void		{			imageLoader.alpha = 1;						if (imageConstraintRect is Rectangle)			{				var w:Number = imageLoader.width;				var h:Number = imageLoader.height;				var r:Number = w/h;								var maxWidth:Number = imageConstraintRect.width;				var maxHeight:Number = imageConstraintRect.height;								// On recherche le scale maximum (selon la hauteur ou la largeur) pour que l'image rentre dans le cadre				var s1:Number = w / maxWidth;				var s2:Number = h / maxHeight;								if (s1>s2)				{					// On se cale sur la largeur					imageLoader.width = maxWidth;					imageLoader.height = imageLoader.width / r;				}				else				{					imageLoader.height = maxHeight;					imageLoader.width = imageLoader.height * r;				}								// On centre l'image				imageLoader.x = (maxWidth - imageLoader.width)/2;				imageLoader.y = (maxHeight - imageLoader.height)/2;			}						/*			if (imageLoader.content is Bitmap)			{				Bitmap(imageLoader.content).smoothing = true;			}			*/						// Evénements Viewers						// 1. Fin du chargement			dispatchEvent(new Event(ViewerEvents.MEDIA_COMPLETE));						if (imageTimeOut <= 0)			{				// 2. Fin de l'affichage (si pas de TimeOut)				dispatchEvent(new Event(ViewerEvents.MEDIA_END));			}			else			{				// 3. TimeOut de l'affichage de l'image				imageTimeIn = getTimer();								addEventListener(Event.ENTER_FRAME, waitForTimeOut, false, 0, true);			}		}		protected function waitForTimeOut (e:Event):void		{			var currentTime:Number = getTimer() - imageTimeIn;						if (currentTime <= imageTimeOut)			{				// % avance				var evt:ProgressEvent = new ProgressEvent(ViewerEvents.MEDIA_PROGRESS, false, false, currentTime, imageTimeOut);				dispatchEvent(evt);			}			else			{				removeEventListener(Event.ENTER_FRAME, waitForTimeOut);								dispatchEvent(new Event(ViewerEvents.MEDIA_END));			}		}		protected function imageSecurityLoadingError (e:IOErrorEvent):void		{		}				protected function imageLoadingError (e:IOErrorEvent):void		{			trace ("[ImageViewer] Loading Error : " + imageUrl);			dispatchEvent(new Event(ViewerEvents.MEDIA_LOAD_ERROR));		}		public function purge():void		{			close();						if (imageLoader.content is Bitmap)			{				var bitmap:Bitmap = Bitmap(imageLoader.content);								if (bitmap.bitmapData)				{					bitmap.bitmapData.dispose();				}			}						if (imageLoader && imageLoader.parent) imageLoader.parent.removeChild(imageLoader);		}		//		// Getter		//				public function get bitmap():Bitmap		{			if (imageLoader.content is Bitmap)			{				return Bitmap(imageLoader.content);			}						return null;		}				public function get url():String		{			return imageUrl;		}		//		// Interface IMediaViewer		//		public function close():void		{			if (imageLoader)			{				var infos:LoaderInfo = imageLoader.contentLoaderInfo;				infos.removeEventListener(Event.INIT, imageLoadingInit);				infos.removeEventListener(Event.COMPLETE, imageLoadingComplete);				infos.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, imageSecurityLoadingError);				infos.removeEventListener(IOErrorEvent.IO_ERROR, imageLoadingError);				infos.removeEventListener(ProgressEvent.PROGRESS, imageLoadingProgress);			}						while (numChildren > 0)			{				removeChildAt(0);			}						removeEventListener(Event.ENTER_FRAME, waitForTimeOut);		}	}}
package org.concert_urbain.touratour.models{    import flash.events.Event;    import flash.events.EventDispatcher;        import org.concert_urbain.touratour.api.TAT;    import org.concert_urbain.touratour.api.core.events.ServiceEvent;    import org.concert_urbain.touratour.api.core.requests.AbstractServiceRequest;    import org.concert_urbain.touratour.api.vos.*;    import org.concert_urbain.touratour.api.vos.collections.MultiVoCollection;    import org.concert_urbain.touratour.api.vos.collections.VoCollection;    import org.concert_urbain.touratour.api.vos.datas.*;    import org.concert_urbain.touratour.api.vos.events.VoEvent;    import org.concert_urbain.touratour.api.vos.medias.*;    import org.concert_urbain.touratour.events.*;		public class ItemsOfQuery extends EventDispatcher	{			// Evènements		public static const CLEAR:String = "org.concert_urbain.touratour.ItemsOfQuery.Clear";				public static const ITEMS_LOADED:String = "org.concert_urbain.touratour.ItemsOfQuery.ItemsLoaded";		public static const ITEMS_ERROR:String = "org.concert_urbain.touratour.ItemsOfQuery.ItemsError";				public static const MEDIAS_LOADED:String = "org.concert_urbain.touratour.ItemsOfQuery.MediasLoaded";		public static const COMMENT_ADDED:String = "org.concert_urbain.touratour.ItemsOfQuery.CommentAddded";		public static const COMMENTS_LOADED:String = "org.concert_urbain.touratour.ItemsOfQuery.CommentsLoaded";		public static const VOTE_LOADED:String = "org.concert_urbain.touratour.ItemsOfQuery.VoteLoaded";		public static const COMMENT_VOTE_LOADED:String = "org.concert_urbain.touratour.ItemsOfQuery.CommentVoteLoaded";						// Id de la query		public var queryId:int;						// Tableau linéaire des VOs des items de la question courante		public var items:Array;				// Tableau associatif des items valides (clé : id)		protected var itemsVOs:Array;				// Tableau associatif des médias des items		protected var mediasOfItems:Array;				// Tableau associatif des commentaires des items		protected var commentsOfItems:Array;				public function ItemsOfQuery()		{			super();						initModel();		}					public function clear():void		{			initModel();						// Reçu par les différentes vues			dispatchEvent(new Event(ItemsOfQuery.CLEAR));		}				public function initModel():void		{			// Liste linéaire des ids des messages			items = new Array();						// Tableau associatifs des médias des items			mediasOfItems = new Array();						// Tableau associatif des commentaires des items			commentsOfItems = new Array();		}		// Sert aux clés des tableaux associatifs		public function keyFor(dataId:int):String		{			return "_" + dataId;		}				public function loadItemsOfQuery(id:int):void		{			queryId = id;						// Chargement des items			loadItems();		}				//		// Chargement des Items		//				public function loadItems():void		{			var ws:TAT = TAT.getInstance();			ws.itemsService.getItemsByQuery(queryId);			ws.addEventListener(ServiceEvent.ITEMS_GET_ITEMS_BY_QUERY_ID_METHOD_SUCCESS, onLoadItemsOfQuery, false, 0, true);			ws.addEventListener(ServiceEvent.ITEMS_GET_ITEMS_BY_QUERY_ID_METHOD_ERROR, onLoadItemsOfQueryError, false, 0, true);		}				public function onLoadItemsOfQueryError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadItemsOfQuery);			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadItemsOfQueryError);						dispatchEvent(new Event(ItemsOfQuery.ITEMS_ERROR));		}				public function onLoadItemsOfQuery(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadItemsOfQuery);			ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadItemsOfQueryError);						// Ensemble des items (valides ou non)			var allItems:Array = e.result as Array;			var i:uint;			var n:uint = allItems.length;			// Tableau linéaire des items validés			items = new Array();						// Tableau associatif des items validés			itemsVOs = new Array();						var itemVO:Item;			var id:int;						for (i=0;i<n;i++) {								itemVO = allItems[i];								//				// On n'affiche que les items valides				//								if (itemVO.isValid)				{					items.push(itemVO);										id = itemVO.id;										// Tableau associatif des items valides					itemsVOs[keyFor(id)] = itemVO;				}			}						dispatchEvent(new Event(ItemsOfQuery.ITEMS_LOADED));		}										//		// Retourne un message à partir de son id		//				public function getItemById(id:int):Item		{			// Tableau assocatif			return itemsVOs[keyFor(id)];		}		//		// Chargement des Médias		//		public function loadMediasOfItemId(itemId:int):void		{			var ws:TAT = TAT.getInstance();			ws.mediasService.getMediasByItemId(itemId);			ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem, false, 0, true);			ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError, false, 0, true);		}		public function onLoadMediasOfItemError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem);			ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError);		}				public function onLoadMediasOfItem(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem);			ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError);						var pictureVO:PictureMedia;			var videoVO:VideoMedia;			var soundVO:SoundMedia;			var textVO:TextMedia;						var medias:Array = new Array();						for (var typeMedia:String in e.result)			{				var mediaArray:Array = e.result[typeMedia];				if (mediaArray is Array)				{					var i:uint;					var n:uint = mediaArray.length					var vo:IVo;										for (i=0; i<n; i++)					{						vo = mediaArray[i];												medias.push(vo);												switch(typeMedia)						{							case "Picture" :								pictureVO = vo as PictureMedia;								break;														case "Video" :								videoVO = vo as VideoMedia;								break;														case "Sound" :								soundVO = vo as SoundMedia;								break;														case "Text" :								textVO = vo as TextMedia;								break;						}					}				}			}						var request:AbstractServiceRequest = e.request;			var params:Array = request.params;			var itemId:int = int(params[0]);						trace("onLoadMediasOfItem", medias.length);						// Tableau associatif			mediasOfItems[keyFor(itemId)] = medias;						dispatchEvent(new IdEvent(ItemsOfQuery.MEDIAS_LOADED, itemId));		}				public function getMediasOfItem(itemId:int):Array		{			// Tableau assocatif			return mediasOfItems[keyFor(itemId)];		}				//		// Chargement des commentaires		//				public function loadCommentsOfItemId(itemId:int):void		{			var ws:TAT = TAT.getInstance();			ws.commentsService.getCommentByItemId(itemId);			ws.addEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem, false, 0, true);			ws.addEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError, false, 0, true);		}				public function onLoadCommentsOfItemError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem);			ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError);		}				public function onLoadCommentsOfItem(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem);			ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError);						var request:AbstractServiceRequest = e.request;			var params:Array = request.params;			var itemId:int = int(params[0]);						// Tableau assocatif			commentsOfItems[keyFor(itemId)] = e.result as Array;						dispatchEvent(new IdEvent(ItemsOfQuery.COMMENTS_LOADED, itemId));		}				public function getCommentsOfItem(itemId:int):Array		{			// Tableau assocatif			return commentsOfItems[keyFor(itemId)];		}				public function getCommentOfItem(itemId:int, commentId:int):Comment		{			var comments:Array = getCommentsOfItem(itemId);			var i:uint;			var n:uint = comments.length;			var commentVO:Comment;						for(i=0 ; i<n ; i++)			{				commentVO = comments[i];								if (commentVO.id == commentId) return commentVO;			}						return null;		}										// -------------------------------------------------------		//		// Ajout d'un commentaire dans un message		//		// -------------------------------------------------------		public function addCommentIntoItem(itemId:int, voteValue:Number, commentVO:Comment):void		{			var ws:TAT = TAT.getInstance();			ws.itemsService.addCommentIntoItem(commentVO, itemId, voteValue);			ws.addEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult, false, 0, true);			ws.addEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError, false, 0, true);		}						private function addCommentResultError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult);			ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError);		}				private function addCommentResult(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult);			ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError);						var commentId:int = int(e.result);						var request:AbstractServiceRequest = e.request;			var params:Array = request.params;						// Nouveau commentaire :			var commentVO:Comment = new Comment(params[0]);			var itemId:int = int(params[1]);			var voteValue:Number = Number(params[2]);							// On prévient qu'un commentaire a été ajouté :			dispatchEvent(new IdEvent(ItemsOfQuery.COMMENT_ADDED, itemId));						//			// Ajout du vote			//						var voteVO:VoteData = new VoteData();			voteVO.id = 0;			voteVO.rate = voteValue;						ws.commentsService.addDataIntoComment(voteVO, commentId, voteValue, itemId);			ws.addEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_SUCCESS, addCommentVoteResult, false, 0, true);			ws.addEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_ERROR, addCommentVoteResultError, false, 0, true);									// On recharge la liste des commentaires de la base --> rafrachissement des champs textes			loadCommentsOfItemId(itemId);		}				private function addCommentVoteResultError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_SUCCESS, addCommentVoteResult);			ws.removeEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_ERROR, addCommentVoteResultError);		}				private function addCommentVoteResult(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_SUCCESS, addCommentVoteResult);			ws.removeEventListener(ServiceEvent.COMMENTS_ADD_DATA_INTO_COMMENT_ERROR, addCommentVoteResultError);						var voteId:int = int(e.result)						var request:AbstractServiceRequest = e.request;			var params:Array = request.params;			var voteObj:Number = params[0];			var commentId:int = params[1];			var vote:Number = params[2];			var itemId:int = params[3];						var voteVO:VoteData = new VoteData(voteObj);			voteVO.id = voteId;						var i:uint;			var voteRate:Number = voteVO.rate;						// On doit recharger le total des votes de l'item --> rafraichissement du sprite			loadVoteItem(itemId);		}		//		// Sert Dring13 v1 (dans AppViewController)		//				public function loadVoteItems():void		{			var i:uint;			var n:uint = items.length;						for (i=0; i<n; i++) {				loadVoteItem(items[i].id);			}		}				//		// Vote d'un item		//		public function loadVoteItem(itemId:int):void		{			var ws:TAT = TAT.getInstance();			ws.itemsService.getRateOfItem(itemId);			ws.addEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_SUCCESS, getRateOfItemResult, false, 0, true);			ws.addEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_ERROR, getRateOfItemError, false, 0, true);		}				protected function getRateOfItemError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_SUCCESS, getRateOfItemResult);			ws.removeEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_ERROR, getRateOfItemError);		}				protected function getRateOfItemResult(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();						// RQ (PROBLEME JSON API) : on ne peut pas supprimer ce listener (sinon on ne recueille que le premier vote...)			//ws.removeEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_SUCCESS, getRateOfItemResult);			//ws.removeEventListener(ServiceEvent.ITEMS_GET_RATE_OF_ITEM_METHOD_ERROR, getRateOfItemError);						var vote:Number = Number(e.result);						var request:AbstractServiceRequest = e.request;			var params:Array = request.params;			var itemId:int = params[0];						var itemVO:Item = getItemById(itemId);			if (itemVO)			{				// Mise à jour du Vote				itemVO.rate = vote;								// On prévient qu'un vote a été mis à jour :				dispatchEvent(new IdEvent(ItemsOfQuery.VOTE_LOADED, itemId));			}		}		//		// Vote des commentaires		//				public function loadVoteComment(itemId:int, commentId:int, once:Boolean = true):void		{			var commentVO:Comment = getCommentOfItem(itemId, commentId);								if (commentVO)			{				var successFn:Function = once ? onLoadVoteComment : onLoadVoteCommentNoRemoveListener;								var ws:TAT = TAT.getInstance();				ws.datasService.getDatasByCommentId(commentId, itemId);				ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, successFn, false, 0, true);				ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentError, false, 0, true);			}		}		protected function onLoadVoteCommentError(e:ServiceEvent):void		{			removeLoadVoteCommentListener();		}				protected function onLoadVoteComment(e:ServiceEvent):void		{			removeLoadVoteCommentListener();			voteCommentLoaded(e);		}				protected function onLoadVoteCommentNoRemoveListener(e:ServiceEvent):void		{			voteCommentLoaded(e);		}				public function removeLoadVoteCommentListener():void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, onLoadVoteComment);			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentError);			ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentNoRemoveListener);		}				protected function voteCommentLoaded(e:ServiceEvent):void		{			var request:AbstractServiceRequest = e.request;			var params:Array = request.params;			var commentId:int = params[0];			var itemId:int = params[1];						var datas:Object = e.result as Object;			var votes:Array = datas["Vote"];						var commentVO:Comment = getCommentOfItem(itemId, commentId);						commentVO.setVote(Comment.computeVote(datas));						// On prévient qu'un vote a été mis à jour :			dispatchEvent(new CommentIdEvent(ItemsOfQuery.COMMENT_VOTE_LOADED, itemId, commentId));		}				//		// Ajout de données		//				public function addItem(itemVO:Item):void		{			var itemId:int = itemVO.id;			if (getItemById(itemId) == null)			{				items.push(itemVO);								// Tableau assocatif				itemsVOs[keyFor(itemId)] = itemVO;			}		}				public function addMediasForItem(mediaVO:AbstractMedia, itemId:int):void		{			// trace("addMediasForItem", mediaVO);						var medias:Array = mediasOfItems[itemId];						if (medias is Array)			{				// trace("add1 mediasOfItems", mediaVO, mediaVO.id);								medias.push(mediaVO);			}			else			{				// trace("add2 mediasOfItems", mediaVO, mediaVO.id);								if (mediaVO is PictureMedia) 				{					trace(PictureMedia(mediaVO).url);				}				else if (mediaVO is VideoMedia) 				{					trace(VideoMedia(mediaVO).url);				}							// Tableau assocatif				mediasOfItems[keyFor(itemId)] = [mediaVO];			}		}	}}
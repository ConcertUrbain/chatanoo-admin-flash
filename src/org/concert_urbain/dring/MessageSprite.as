package org.concert_urbain.dring{	import flash.display.Graphics;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.BitmapFilterQuality;	import flash.filters.GlowFilter;	import flash.geom.Point;		import gs.*;	import gs.easing.*;		import org.concert_urbain.touratour.api.vos.*;
			public class MessageSprite extends Sprite	{			private var border:Sprite;			public var size:Number = 10;				public var position:Point;		public var currentPosition:Point;		public var vo:Item;				public var randomX:Number;		public var randomY:Number;				public var percentX:Number;		public var percentY:Number;				private var percentRollEffect:Number = 0;		private var bgColor:uint = 0;		private var bdColor:uint = 0;				public var isSelected:Boolean = false;		public function MessageSprite(){			super();						border = new Sprite();			border.mouseEnabled = false;			addChild(border);						randomX = Math.random()/80;			randomY = Math.random()/20;						addEventListener(MouseEvent.ROLL_OVER, rollOver, false, 1, true);			addEventListener(MouseEvent.ROLL_OUT, rollOut, false, 1, true);		}				public function rollOver(e:MouseEvent):void		{			rollPercent = 0;			TweenLite.killTweensOf (this, false)			TweenLite.to(this, .50, {rollPercent:1, ease:Cubic.easeOut})		}				public function rollOut(e:MouseEvent):void		{			TweenLite.killTweensOf (this, false)			TweenLite.to(this, .40, {rollPercent:0, ease:Cubic.easeOut})		}		public function select(bool:Boolean):void		{			isSelected = bool;			bdColor = isSelected ? 0xCCBB00 : 0x666666;			drawBorder(bdColor);		}						//		//		//				public function get rollPercent():Number		{			return percentRollEffect;		}				public function set borderColor(c:uint):void		{			bdColor = c;			drawBorder(c);		}				public function set backgroundColor(c:uint):void		{			bgColor = c;			drawBackground(c);		}				public function set rollPercent(p:Number):void		{			percentRollEffect = p;						var glow:GlowFilter;			if (filters.length > 0)			{				glow = filters[0];			}			else			{				glow = new GlowFilter();				glow.quality = BitmapFilterQuality.HIGH				glow.alpha = 0.8;				glow.color = bdColor;				filters = [glow];			}						glow.blurX = glow.blurY = 30 * percentRollEffect;			filters = [glow];		}				private function drawBorder(color:Number):void		{			var g:Graphics = border.graphics;			g.lineStyle(0, color);			g.drawRect(-size/2, -size/2, size, size);		}				private function drawBackground(color:Number):void		{			var g:Graphics = graphics;			g.beginFill(color);			g.drawRect(-size/2, -size/2, size, size);		}	}}
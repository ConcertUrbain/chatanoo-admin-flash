package org.concert_urbain.touratour.models{    import flash.events.Event;    import flash.events.EventDispatcher;    	// API JSON	import org.concert_urbain.touratour.api.TAT;	import org.concert_urbain.touratour.api.core.events.ServiceEvent;	import org.concert_urbain.touratour.api.core.requests.AbstractServiceRequest;	import org.concert_urbain.touratour.api.vos.*;	import org.concert_urbain.touratour.api.vos.collections.MultiVoCollection;	import org.concert_urbain.touratour.api.vos.collections.VoCollection;	import org.concert_urbain.touratour.api.vos.datas.*;	import org.concert_urbain.touratour.api.vos.events.VoEvent;	import org.concert_urbain.touratour.api.vos.medias.*;		import org.concert_urbain.touratour.events.*;		public class AllQueries extends EventDispatcher	{			// Evènements		public static const CLEAR:String = "org.concert_urbain.touratour.DataModel.Clear";		public static const QUERIES_LOADED:String = "org.concert_urbain.touratour.DataModel.QueriesLoaded";		// Tableau linéaire des VOs des questions :		public var queries:Array;		public var currentQuery:Query;						public function AllQueries()		{			super();						// Liste linéaire des questions			queries = new Array();		}					//		// Chargement des Queries		//		public function loadQueries():void		{			var ws:TAT = TAT.getInstance();			ws.queriesService.getQueries();			ws.addEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries, false, 0, true);			ws.addEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError, false, 0, true);		}				public function onLoadQueriesError(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries);			ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError);		}				public function onLoadQueries(e:ServiceEvent):void		{			var ws:TAT = TAT.getInstance();			ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries);			ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError);						queries = e.result as Array;						dispatchEvent(new Event(AllQueries.QUERIES_LOADED));		}				public function get validQueries():Array		{			var i:uint;			var n:uint = queries.length;			var queryVO:Query;			var isValidQueries:Array = new Array();						for(i=0;i<n;i++)			{				queryVO = queries[i];				if (queryVO.isValid && queryVO.content)				{					isValidQueries.push(queryVO);				}			}			return isValidQueries;		}				public function getQueryVO(queryId:Number):Query		{			var index:int = getIndexQuery(queryId);			if (index != -1) return queries[index];			return null;		}				public function getIndexQuery(queryId:Number):int		{			var i:uint;			var n:uint = queries.length;			var queryVO:Query;									for(i=0; i<n; i++)			{				queryVO = queries[i];				if (queryVO.id == queryId) return i;			}			return -1		}				public function getPreviousQuery(currentQueryId:Number):Number		{			var index:int = getIndexQuery(currentQueryId);			if (index < 1) return queries[queries.length - 1].id			else return queries[index - 1].id;		}				public function getNextQuery(currentQueryId:Number):Number		{			var index:int = getIndexQuery(currentQueryId);			var n:uint = queries.length;						if (index == -1) 			{				return queries[0].id;			}			else if (index == (n - 1))			{				return queries[0].id;			}			else 			{				return queries[index + 1].id;			}		}					public function isQueryExists(queryId:Number):Boolean		{			var index:int = getIndexQuery(queryId);			return (index != -1 ? true : false);		}	}}	
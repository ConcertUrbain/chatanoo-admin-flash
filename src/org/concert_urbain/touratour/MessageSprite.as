package org.concert_urbain.touratour{	import flash.display.Graphics;	import flash.display.CapsStyle;	import flash.display.JointStyle;	import flash.display.LineScaleMode;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.filters.BitmapFilterQuality;	import flash.filters.GlowFilter;	import flash.geom.Point;		import gs.*;	import gs.easing.*;		import org.concert_urbain.cfacom.PersoTitle;	import org.concert_urbain.touratour.api.vos.*;	import org.concert_urbain.utils.PersoGraphicTools;			public class MessageSprite extends Sprite	{			protected var border:Sprite;					public var size:Number = 13;				public var position:Point;		public var currentPosition:Point;		public var vo:Item;				public var isSelected:Boolean = false;		public var isVisited:Boolean = false;		public var isAnimating:Boolean = false;				public var percentY:Number;				public var randomX:Number;		public var randomY:Number;				protected var overed:Boolean = false;						protected var percentRollEffect:Number = 0;		protected var percentScaleEffect:Number = 1;		protected var bgColor:uint = 0;		//protected var bdColor:uint = 0xFFFF00;		protected var bdColor:uint = 0xDDDDDD;			public function MessageSprite(){						super();						border = new Sprite();			border.mouseEnabled = false;			addChild(border);						mouseChildren = false;			randomX = Math.random()/80;			randomY = Math.random()/20;		}				public function delayStartAnimPosition():void{			startAnimPosition();		}				public function startAnimPosition():void		{			if ((Math.abs(currentPosition.x - position.x) > 1) || (Math.abs(currentPosition.y - position.y) > 1))			{				isAnimating = true;				TweenLite.killTweensOf (this, false);				TweenLite.to(this, 0.5, {currentPositionX:position.x, currentPositionY:position.y, ease:Cubic.easeInOut, delay:1, onComplete:endOfAnimation})			}		}				public function endOfAnimation():void		{			isAnimating = false;					}				public function set currentPositionX(aX:Number):void		{				currentPosition.x = aX;			x = aX;		}				public function get currentPositionX():Number{			return currentPosition.x;		}				public function set currentPositionY(aY:Number):void {				currentPosition.y = aY;				y = aY;		}				public function get currentPositionY():Number{			return currentPosition.y;		}		public function select(bool:Boolean):void{			isSelected = bool;						// On mémorise qu'on a cliqué sur ce message			if (bool == true) isVisited = true;						bdColor = isSelected ? 0xCCBB00 : 0x666666;			drawBorder(bdColor);		}		//		// Animation glow au rollOver		//				public function get rollPercent():Number{	return percentRollEffect;	}				public function set rollPercent(p:Number):void{			percentRollEffect = p;			if(p <= 0.2){				filters = [];			}else{				var glow:GlowFilter;				if (filters.length > 0)				{					glow = filters[0];				}				else				{					glow = new GlowFilter();					glow.quality = BitmapFilterQuality.HIGH					glow.alpha = 0.8;					glow.color = bdColor;					glow.strength = 5;					filters = [glow];				}								glow.blurX = glow.blurY = 5 * percentRollEffect;				filters = [glow];			}		}				public function get scalePercent():Number{	return percentScaleEffect;	}				public function set scalePercent(p:Number):void{			percentScaleEffect = p;						scaleX = scaleY = percentScaleEffect;		}				//		// Couleurs		//				public function set borderColor(c:uint):void{			bdColor = c;			drawBorder(c);		}				public function set backgroundColor(c:uint):void{			bgColor = c;			drawBackground(c);		}				protected function drawBorder(color:Number):void{			var g:Graphics = border.graphics;			g.clear();			g.lineStyle(isSelected ? 4 : 0, color, 1, true, LineScaleMode.NORMAL, CapsStyle.SQUARE, JointStyle.MITER);			g.drawRect(-size/2, -size/2, size, size);		}				protected function drawBackground(color:Number):void{			var g:Graphics = graphics;			g.clear();			g.beginFill(color);			g.drawRect(-size/2, -size/2, size, size);		}	}}
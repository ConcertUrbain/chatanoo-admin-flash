<?xml version="1.0" encoding="utf-8"?>

<mx:Panel
	
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:component="components.*"
	xmlns:dialog="admin.dialogs.*"
	xmlns:renderers="admin.renderers.*"
	xmlns:extension="extension.*"
	xmlns:upload="admin.upload.*"	
	xmlns:local="*"
	
	width="100%"  height="100%"
	
	creationComplete="init();"
	>
	
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			
			import admin.dialogs.AddMediaDialogBox;
			import admin.dialogs.CommentDialogBox;
			import admin.dialogs.DataCartoDialogBox;
			import admin.dialogs.DeleteVODialogBox;
			import admin.dialogs.ItemDialogBox;
			import admin.dialogs.MediaDialogBox;
			import admin.dialogs.MediaTextDialogBox;
			import admin.dialogs.MetaDataDialogBox;
			import admin.dialogs.MetaDataSelectionDialogBox;
			import admin.dialogs.MetaDataWithSelectionNameDialogBox;
			import admin.dialogs.QueryDialogBox;
			import admin.dialogs.UploadMediaDialogBox;
			import admin.dialogs.UserDialogBox;
			import admin.dialogs.UserSelectionDialogBox;
			import admin.dialogs.VoteDialogBox;
			
			import org.concert_urbain.touratour.ProjectsApiKeys;
			import org.concert_urbain.touratour.DataGridVO.CommentDataGridItem;
			import org.concert_urbain.touratour.DataGridVO.DataGridItem;
			import org.concert_urbain.touratour.api.TAT;
			import org.concert_urbain.touratour.api.core.events.ServiceEvent;
			import org.concert_urbain.touratour.api.core.requests.AbstractServiceRequest;
			import org.concert_urbain.touratour.api.vos.Comment;
			import org.concert_urbain.touratour.api.vos.IVo;
			import org.concert_urbain.touratour.api.vos.Item;
			import org.concert_urbain.touratour.api.vos.Meta;
			import org.concert_urbain.touratour.api.vos.Query;
			import org.concert_urbain.touratour.api.vos.User;
			import org.concert_urbain.touratour.api.vos.collections.MultiVoCollection;
			import org.concert_urbain.touratour.api.vos.collections.VoCollection;
			import org.concert_urbain.touratour.api.vos.datas.AbstractData;
			import org.concert_urbain.touratour.api.vos.datas.CartoData;
			import org.concert_urbain.touratour.api.vos.datas.VoteData;
			import org.concert_urbain.touratour.api.vos.events.VoEvent;
			import org.concert_urbain.touratour.api.vos.medias.AbstractMedia;
			import org.concert_urbain.touratour.api.vos.medias.PictureMedia;
			import org.concert_urbain.touratour.api.vos.medias.SoundMedia;
			import org.concert_urbain.touratour.api.vos.medias.TextMedia;
			import org.concert_urbain.touratour.api.vos.medias.VideoMedia;
			import org.concert_urbain.touratour.events.DeleteGridRowEvent;
			import org.concert_urbain.touratour.events.EditGridRowEvent;
			import org.concert_urbain.touratour.events.IdEvent;
			import org.concert_urbain.touratour.events.UserEvent;
			import org.concert_urbain.touratour.events.VOEvent;
			import org.concert_urbain.touratour.events.ValidGridRowEvent;

			
			
			
			// WebService (JSON)
			private var _ws:TAT;
			
			// Id de l'administrateur connecté à l'admin
			public var adminUserId:Number;
			public var adminUserVO:User;
			
			
			// Dialog Boxes :
			private var okCancel:DeleteVODialogBox;
			private var queryBox:QueryDialogBox;
			private var commentBox:CommentDialogBox;
			private var voteBox:VoteDialogBox;
			private var itemBox:ItemDialogBox;
			private var mediaBox:MediaDialogBox;
			private var addMediaBox:AddMediaDialogBox;
			private var uploadMediaBox:UploadMediaDialogBox;
			private var mediaTextBox:MediaTextDialogBox;
			private var dataCartoBox:DataCartoDialogBox;
			private var metaDataBox:MetaDataDialogBox;
			private var metaDataSelectionBox:MetaDataSelectionDialogBox;
			private var metaDataWithSelectionNameBox:MetaDataWithSelectionNameDialogBox;
			
			private var userSelectionBox:UserSelectionDialogBox;
			private var userBox:UserDialogBox;
			
			
			// Chemin des médias
			private var _mediaPath:String;
			private var _itemMedias:Array;
			private var _queryMediaMaps:Array;

			
			//
			// DataProviders
			//
			
			[Bindable]
			private var _usersDataProvider:ArrayCollection;
			
			[Bindable]
			private var _queriesDataProvider:ArrayCollection;
			
			[Bindable]
			private var _keyWordsDataProvider:ArrayCollection;
			
			[Bindable]
			private var _mapTypesDataProvider:ArrayCollection;
			
			[Bindable]
			private var _dataTypesDataProvider:ArrayCollection;
			
			[Bindable]
			private var _queryItemsDataProvider:ArrayCollection;
			[Bindable]
			private var _queryUsersDataProvider:ArrayCollection;
			[Bindable]
			private var _queryKeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _queryMapPositionDataProvider:ArrayCollection;
			[Bindable]
			private var _queryMapTypeDataProvider:ArrayCollection;
			[Bindable]
			private var _queryMapZoomDataProvider:ArrayCollection;
			[Bindable]
			private var _queryMediaMapDataProvider:ArrayCollection;
			[Bindable]
			private var _queryDataTypeDataProvider:ArrayCollection;
						
			
			[Bindable] 			
			private var _itemMapPositionDataProvider:ArrayCollection;
			[Bindable]
			private var _itemKeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _itemMediasDataProvider:ArrayCollection;
			[Bindable]
			private var _itemVoteDataProvider:ArrayCollection;
			[Bindable]
			private var _itemCommentsDataProvider:ArrayCollection;
			[Bindable]
			private var _itemUsersDataProvider:ArrayCollection;

			
			//
			// DataProviders BBC
			//
			
			[Bindable]
			private var _type1KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _type2KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _type3KeyWordsDataProvider:ArrayCollection;
			
			[Bindable]
			private var _queryType1KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _queryType2KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _queryType3KeyWordsDataProvider:ArrayCollection;
			
			[Bindable]
			private var _itemType1KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _itemType2KeyWordsDataProvider:ArrayCollection;
			[Bindable]
			private var _itemType3KeyWordsDataProvider:ArrayCollection;
			



			public function init():void
			{
				// Evènements des itemRenderer des dataGrids :
				addEventListener(DeleteGridRowEvent.DELETE_GRID_ROW, deleteGridRow, false, 0, true);
				addEventListener(EditGridRowEvent.EDIT_GRID_ROW, editGridRow, false, 0, true);
				addEventListener(ValidGridRowEvent.VALID_GRID_ROW, validGridRow, false, 0, true);
				
				_ws = TAT.getInstance();
				
				// Chargement des utilisateurs
				loadUsers();
			}

			public function alertError(e:ServiceEvent):void
			{
				Alert.show(e.type, "Erreur du webservice");
			}

			
			
			
			
			// --------------------------------------------------------------------
			//
			// Liste des utilisateurs
			//
			// --------------------------------------------------------------------
			
			public function loadUsers():void
			{
				CursorManager.setBusyCursor();
				
				_ws.usersService.getUsers();
				_ws.addEventListener(ServiceEvent.USERS_GET_USERS_METHOD_SUCCESS, onLoadUsers, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_GET_USERS_METHOD_ERROR, onLoadUsersError, false, 0, true);
			}
			
			private function onLoadUsersError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_GET_USERS_METHOD_SUCCESS, onLoadUsers);
				_ws.removeEventListener(ServiceEvent.USERS_GET_USERS_METHOD_ERROR, onLoadUsersError);
			}
			
			public function onLoadUsers(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.USERS_GET_USERS_METHOD_SUCCESS, onLoadUsers);
				_ws.removeEventListener(ServiceEvent.USERS_GET_USERS_METHOD_ERROR, onLoadUsersError);
				
				var users:Array = e.result as Array;
				
				var i:uint;
				var n:uint = users.length;
				var userVO:User;
				
				var dp:ArrayCollection = new ArrayCollection();
				
				for (i=0 ; i<n ; i++)
				{
					userVO = users[i] as User;
					
					// trace("user", userVO.id, userVO.isBan, userVO.role);
					
					// DATA PROVIDER D'UNE QUERY
					dp.addItem(new DataGridItem("User", userVO.id, userVO));
					
					// On recherhe l'utilisateur connecté
					if (userVO.id == adminUserId)
					{
						adminUserVO = userVO;
						
						if (adminUserVO.role != "admin")
						{
							Alert.show("Vous n'avez pas les doits d'accès à l'admin", "Authentification");
							dispatchEvent(new Event(UserEvent.NOT_AN_ADMIN, true));
							return;
						}
					}
				}
				
				_usersDataProvider = dp;
				
				
				//
				// Chargement des données (en fonction de l'administrateur connecté)
				//
				
				// Chargement des queries
				loadQueries();
				
				// Chargement des méta-données
				loadMetaDatas();
			}

			
			
			// --------------------------------------------------------------------
			//
			// Liste des queries
			//
			// --------------------------------------------------------------------
			
			public function loadQueries():void
			{
				CursorManager.setBusyCursor();
				
				_ws.queriesService.getQueries();
				_ws.addEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError, false, 0, true);
			}

			public function onLoadQueriesError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries);
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError);
			}
			
			public function onLoadQueries(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_SUCCESS, onLoadQueries);
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERIES_METHOD_ERROR, onLoadQueriesError);
				
				var queries:Array = e.result as Array;
				
				var i:uint;
				var n:uint = queries.length;
				var queryVo:Query;
				
				var dp:ArrayCollection = new ArrayCollection();
				
				for (i=0 ; i<n ; i++)
				{
					queryVo = queries[i] as Query;
					
					// trace(queryVo.content, queryVo.isValid);
					
					// DATA PROVIDER D'UNE QUERY
				    dp.addItem(new DataGridItem("Query", queryVo.id, queryVo));
				}

				_queriesDataProvider = dp;
			}




			//
			// Clic sur une query
			//
			
			public function loadDetailsOfQuery():void
			{
				// Items
				loadItemsOfQuery();
				
				// Cartographie
				loadDatasOfQuery();
				
				// Métadonnées (Mots-clés)
				loadMetasOfQuery();
				
				// Médias (Carte)
				loadMediasOfQuery();
				
				// User
				loadUserOfQuery();
			}

			
			
			// --------------------------------------------------------------------
			//
			// Utilisateurs associés au queries et aux items
			//
			// --------------------------------------------------------------------
			
			
			public function loadUserOfQuery():void
			{
				var id:Number = queriesGrid.selectedItem.id;
				
				CursorManager.setBusyCursor();
				
				_ws.queriesService.getUserFromQuery(id);
				_ws.addEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_SUCCESS, onLoadUserOfQuery, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_ERROR, onLoadUserOfQueryError, false, 0, true);
			}

			public function onLoadUserOfQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_SUCCESS, onLoadUserOfQuery);
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_ERROR, onLoadUserOfQueryError);

				// Données de la grille
				_queryUsersDataProvider = new ArrayCollection();
				
				var userVO:User = e.result as User;
				if (userVO is User)
				{
					_queryUsersDataProvider.addItem(new DataGridItem("QueryUser", userVO.id, userVO));
				}
			}
			
			public function onLoadUserOfQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_SUCCESS, onLoadUserOfQuery);
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_USER_FROM_QUERY_METHOD_ERROR, onLoadUserOfQueryError);
				
				// Données de la grille (vide)
				_queryUsersDataProvider = new ArrayCollection();
			}
			
			

			// --------------------------------------------------------------------
			//
			// Liste des méta-données
			//
			// --------------------------------------------------------------------
			
			public function loadMetaDatas():void
			{
				CursorManager.setBusyCursor();

				_ws.searchService.getMetas();
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadMetaDatas, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadMetaDatasError, false, 0, true);
			}
			
			public function onLoadMetaDatasError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadMetaDatas);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadMetaDatasError);
			}
			
			public function onLoadMetaDatas(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadMetaDatas);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadMetaDatasError);
				
				var metadatas:Array = e.result as Array;
				
				var i:uint;
				var n:uint = metadatas.length;
				var metaVo:Meta;
				
				// Liste des mots-clés
				var dp_kw:ArrayCollection = new ArrayCollection();
				
				// Liste des types de carte
				var dp_map:ArrayCollection = new ArrayCollection();

				
				// Liste des mots-clés BBC :
				var dp_kw1:ArrayCollection = new ArrayCollection();
				var dp_kw2:ArrayCollection = new ArrayCollection();
				var dp_kw3:ArrayCollection = new ArrayCollection();
				
				// Autres mots-clés
				var dp_motcle:ArrayCollection = new ArrayCollection();
				
				// Liste des métas-données
				var metaType:String;
				
				for (i=0 ; i<n ; i++)
				{
					metaVo = metadatas[i] as Meta;
					
					// DATA PROVIDER D'UNE METADATA
					metaType = metaVo.name;
					switch(metaType)
					{
						case "":
							break;
						
				    	case "KeyWord":
				    		dp_kw.addItem(new DataGridItem(metaType, metaVo.id, metaVo));
				    		break;
				    		
				    	case "MapType":
				    		dp_map.addItem(new DataGridItem(metaType, metaVo.id, metaVo));
				    		break;
				    		
						case "Type1KeyWord":
							dp_kw1.addItem(new DataGridItem(metaType, metaVo.id, metaVo));
							break;
						
						case "Type2KeyWord":
							dp_kw2.addItem(new DataGridItem(metaType, metaVo.id, metaVo));
							break;
						
						case "Type3KeyWord":
							dp_kw3.addItem(new DataGridItem(metaType, metaVo.id, metaVo));
							break;
						
						case "UserInfos":
						case "MapZoom":
						case "json":
							break;
						
						// Données associées à une Query
						case "AXE_HORIZONTAL_GAUCHE":
						case "AXE_HORIZONTAL_DROITE":
						case "AXE_VERTICAL_BAS":
						case "AXE_VERTICAL_HAUT":
						case "BACKGROUND_IMAGE":
						case "CARTE_LONGITUDE_MIN":
						case "CARTE_LATITUDE_MIN":
						case "CARTE_LATITUDE_MAX":
							break;
							
						// Données associées au projet
						case "BACKGROUND_IMAGE_ACCUEIL":
							dp_motcle.addItem(new DataGridItem("DataType", metaVo.id, metaVo));
						
				    	default:
				 	}
				}

				// Données des grilles
				_keyWordsDataProvider = dp_kw;
				_mapTypesDataProvider = dp_map;
				_dataTypesDataProvider = dp_motcle;
				
				// BBC :
				_type1KeyWordsDataProvider = dp_kw1;
				_type2KeyWordsDataProvider = dp_kw2;
				_type3KeyWordsDataProvider = dp_kw3;
			}

			
			
			
			// --------------------------------------------------------------------
			//
			// Liste des items
			//
			// --------------------------------------------------------------------
			
			public function loadItemsOfQuery():void
			{
				if (! queriesGrid.selectedItem) return;
				
				var id:Number = queriesGrid.selectedItem.id;
				
				// Les médias sont répartis par question sur le serveur :
				_mediaPath = "";
				
				CursorManager.setBusyCursor();
				
				_ws.itemsService.getItemsByQuery(id);
				_ws.addEventListener(ServiceEvent.ITEMS_GET_ITEMS_BY_QUERY_ID_METHOD_SUCCESS, onLoadItemsOfQuery, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_GET_ITEMS_BY_QUERY_ID_METHOD_ERROR, onLoadItemsOfQueryError, false, 0, true);
			}
			
			public function onLoadItemsOfQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadItemsOfQuery);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadItemsOfQueryError);
			}
			
			public function onLoadItemsOfQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_SUCCESS, onLoadItemsOfQuery);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_METHOD_ERROR, onLoadItemsOfQueryError);
				
				var items:Array = e.result as Array;
				
				
				var i:uint;
				var n:uint = items.length;
				var itemVO:Item;
				
				var dp:ArrayCollection = new ArrayCollection();
				
				for (i=0 ; i<n ; i++)
				{
					itemVO = items[i] as Item;
					
					// DATA PROVIDER D'UN ITEM
				    dp.addItem(new DataGridItem("Item", itemVO.id, itemVO));
				}

				// Données de la grille
				_queryItemsDataProvider = dp;

				// On vide les autres grilles
				_itemMediasDataProvider = new ArrayCollection();
				_itemCommentsDataProvider = new ArrayCollection();
				
				_itemKeyWordsDataProvider = new ArrayCollection();
				_itemType1KeyWordsDataProvider = new ArrayCollection();
				_itemType2KeyWordsDataProvider = new ArrayCollection();
				_itemType3KeyWordsDataProvider = new ArrayCollection();
				
				clearItemMediaPlayers();
			}

			
			private function getItemFromId(id:uint):Item
			{			
				// Liste des items
				var dp_items:ArrayCollection = _queryItemsDataProvider;
				var i:uint;
				var n:int = dp_items.length;
				var item:Object;
				var itemVO:Item;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_items.getItemAt(i);
					itemVO = item.vo as Item;
					
					if (itemVO.id == id) return itemVO;
				}
				
				return null;
			}
			
			private function getCommentFromId(id:uint):Comment
			{			
				// Liste des comments
				var dp_items:ArrayCollection = _itemCommentsDataProvider;
				var i:uint;
				var n:int = dp_items.length;
				var item:Object;
				var commentVO:Comment;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_items.getItemAt(i);
					commentVO = item.vo as Comment;
					
					if (commentVO.id == id) return commentVO;
				}
				
				return null;
			}
			


			// --------------------------------------------------------------------
			//
			// Liste des données d'une query (carto, etc...)
			//
			// --------------------------------------------------------------------

			public function loadDatasOfQuery():void
			{				
				var id:Number = queriesGrid.selectedItem.id;
				
				CursorManager.setBusyCursor();
				
				_ws.datasService.getDatasByQueryId(id);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError, false, 0, true);
			}
			
			public function onLoadDatasOfQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery);
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError);
			}
			
			public function onLoadDatasOfQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadDatasOfQuery);
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_QUERY_ID_METHOD_ERROR, onLoadDatasOfQueryError);
				
				var datas:Object = e.result as Object;
			
				// Cartographie (position du centre de la carte)
				var cartoDp:ArrayCollection = new ArrayCollection();
				
				if (datas != null)
				{
					var i:uint;
					var dataCarto:Array = datas['Carto'];
					
					if (dataCarto is Array)
					{
						var n:uint = dataCarto.length;
						var dataVO:IVo;
						
						for (i=0; i<n; i++)
						{
							dataVO = dataCarto[i] as IVo;
							if (dataVO is CartoData)
							{
								cartoDp.addItem(new DataGridItem("QueryCarto", dataVO.id, dataVO));
							}
						}
					}
				}
				
				// Données de la grille
				_queryMapPositionDataProvider = cartoDp;
			}
			
			
			public function loadMetasOfQuery():void
			{				
				var id:Number = queriesGrid.selectedItem.id;
				
				CursorManager.setBusyCursor();
				
				_ws.searchService.getMetasByVo(id, "Query");
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError, false, 0, true);
			}
			
			public function onLoadMetasOfQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError);
			}
			
			
			public function onLoadMetasOfQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetasOfQuery);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetasOfQueryError);
				
				var metas:Array = e.result as Array;
			
				// Mots-clés
				var metaDp:ArrayCollection = new ArrayCollection();
				
				// Type de carte
				var mapTypeDp:ArrayCollection = new ArrayCollection();
				
				// Zoom de carte
				var mapZoomDp:ArrayCollection = new ArrayCollection();
					
				// Mots-clés BBC
				var metaKw1Dp:ArrayCollection = new ArrayCollection();
				var metaKw2Dp:ArrayCollection = new ArrayCollection();
				var metaKw3Dp:ArrayCollection = new ArrayCollection();

				var metaDataDp:ArrayCollection = new ArrayCollection();
				
				var i:uint;
				
				if (metas is Array)
				{
					var n:uint = metas.length;
					var metaVO:Meta;
					
					for (i=0; i<n; i++)
					{
						metaVO = metas[i] as Meta;
						if (metaVO is Meta)
						{
							switch (metaVO.name)
							{
								case "KeyWord":
									metaDp.addItem(new DataGridItem("QueryKeyWord", metaVO.id, metaVO));
								 	break;
								 	
								case "MapType":
									mapTypeDp.addItem(new DataGridItem("QueryMapType", metaVO.id, metaVO));
								 	break;
								 	
								case "MapZoom":
									mapZoomDp.addItem(new DataGridItem("MapZoom", metaVO.id, metaVO));
								 	break;
								
								// BBC
								
								case "Type1KeyWord":
									metaKw1Dp.addItem(new DataGridItem("QueryType1KeyWord", metaVO.id, metaVO));
									break;
								
								case "Type2KeyWord":
									metaKw2Dp.addItem(new DataGridItem("QueryType2KeyWord", metaVO.id, metaVO));
									break;
								
								case "Type3KeyWord":
									metaKw3Dp.addItem(new DataGridItem("QueryType3KeyWord", metaVO.id, metaVO));
									break;
								
								default:
									metaDataDp.addItem(new DataGridItem("QueryDataType", metaVO.id, metaVO));
									break;
							}
						}
					}
				}
				
				// Données de la grille des mots-clés de la query
				_queryKeyWordsDataProvider = metaDp;
				
				// Données de la grille du type de carte de la query
				_queryMapTypeDataProvider = mapTypeDp;
				
				// Données de la grille du type de carte de la query
				_queryMapZoomDataProvider = mapZoomDp;
				
				_queryDataTypeDataProvider = metaDataDp;
				
				// Données de la grille des mots-clés BBC de la query
				_queryType1KeyWordsDataProvider = metaKw1Dp;
				_queryType2KeyWordsDataProvider = metaKw2Dp;
				_queryType3KeyWordsDataProvider = metaKw3Dp;
				
				// Sort
				arrayCollectionSort(_queryDataTypeDataProvider, "id", true);
			}

			public function arrayCollectionSort(ar:ArrayCollection, fieldName:String, isNumeric:Boolean):void 
			{
				var dataSortField:SortField = new SortField();
				dataSortField.name = fieldName;
				dataSortField.numeric = isNumeric;
				
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				ar.sort = numericDataSort;
				ar.refresh();
			}

			//
			// 1. Liste des médias d'un item
			//
			
			public function loadMediasOfQuery():void
			{
				CursorManager.setBusyCursor();
				
				clearQueryMediaPlayers();
				
				var id:Number = queriesGrid.selectedItem.id;
				
				_ws.mediasService.getMediasByQueryId(id);
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadMediasOfQuery, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_ERROR, onLoadMediasOfQueryError, false, 0, true);
			}
			
			public function onLoadMediasOfQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadMediasOfQuery);
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_ERROR, onLoadMediasOfQueryError);
			}
			
			public function onLoadMediasOfQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_SUCCESS, onLoadMediasOfQuery);
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_QUERY_ID_METHOD_ERROR, onLoadMediasOfQueryError);
				
				var pictureVO:PictureMedia;
				var videoVO:VideoMedia;
				
				var medias:Array = new Array();
				var dp:ArrayCollection = new ArrayCollection();
				
				for (var typeMedia:String in e.result)
				{
					var mediaArray:Array = e.result[typeMedia];
					if (mediaArray is Array)
					{
						var i:uint;
						var n:uint = mediaArray.length
						var vo:IVo;
						
						for (i=0; i<n; i++)
						{
							vo = mediaArray[i];
							
							medias.push(vo);
							
							switch(typeMedia)
							{
								case "Picture" :
									pictureVO = vo as PictureMedia;
									dp.addItem(new DataGridItem(typeMedia, pictureVO.id, vo));
									break;
								
								case "Video" :
									videoVO = vo as VideoMedia;
									dp.addItem(new DataGridItem(typeMedia, videoVO.id, vo));
									break;
							}
						}
					}
				}
				
				// DATA PROVIDER : Média
				_queryMediaMapDataProvider = dp;
				_queryMediaMaps = medias;
				
				// Carte-Média
				displayMediaMaps();
			}
			
			public function displayMediaMaps():void
			{
				if (mediaMapPlayer && _queryMediaMaps)
				{
					var appParams:Object = Application.application.parameters;
					
					mediaMapPlayer.baseURL = appParams.mediaBaseURL;
					mediaMapPlayer.mediaAmazonS3 = appParams.awsS3;
					mediaMapPlayer.mediaPath = _mediaPath;
					
					mediaMapPlayer.displayFirstMedia(_queryMediaMaps);
				}
			}
			
			
			

			// --------------------------------------------------------------------
			//
			// Liste des données d'un item (médias, comment, vo, carto, etc...)
			//
			// --------------------------------------------------------------------
			
			public function loadDetailsOfItem():void
			{
				// On vide les 2 players (items et medias)
				clearItemMediaPlayers();
				
				var itemId:Number = itemsGrid.selectedItem.id;
				
				loadMediasOfItem (itemId);
				loadDatasOfItem (itemId);
				loadCommentsOfItem (itemId);
				loadMetaOfItem(itemId);
				loadUserOfItem(itemId);
			}
			

			//
			// 1. Liste des médias d'un item
			//
			
			public function loadMediasOfItem(itemId:Number):void
			{
				CursorManager.setBusyCursor();
				
				_ws.mediasService.getMediasByItemId(itemId);
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError, false, 0, true);
			}
			
			public function onLoadMediasOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem);
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError);
			}
			
			public function onLoadMediasOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadMediasOfItem);
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIAS_BY_ITEM_ID_METHOD_ERROR, onLoadMediasOfItemError);
				
				var pictureVO:PictureMedia;
				var videoVO:VideoMedia;
				var soundVO:SoundMedia;
				var textVO:TextMedia;
				
				var medias:Array = new Array();
				var dp:ArrayCollection = new ArrayCollection();

				for (var typeMedia:String in e.result)
				{
					var mediaArray:Array = e.result[typeMedia];
					if (mediaArray is Array)
					{
						var i:uint;
						var n:uint = mediaArray.length
						var vo:IVo;
						
						for (i=0; i<n; i++)
						{
							vo = mediaArray[i];
							
							medias.push(vo);
							
							switch(typeMedia)
							{
								case "Picture" :
									pictureVO = vo as PictureMedia;
						 	  	 	dp.addItem(new DataGridItem(typeMedia, pictureVO.id, vo));
									break;
									
								case "Video" :
									videoVO = vo as VideoMedia;
						 	  	 	dp.addItem(new DataGridItem(typeMedia, videoVO.id, vo));
									break;
									
								case "Sound" :
									soundVO = vo as SoundMedia;
						 	  	 	dp.addItem(new DataGridItem(typeMedia, soundVO.id, vo));
									break;
									
								case "Text" :
									textVO = vo as TextMedia;
									dp.addItem(new DataGridItem(typeMedia, textVO.id, vo));
									break;
							}
						}
					}
				}
				
				// DATA PROVIDER : Média
				_itemMediasDataProvider = dp;
				_itemMedias = medias;
				
				// Item
				displayItem();
			}
			
			public function displayItem():void
			{
				if (itemPlayer && _itemMedias)
				{
					var appParams:Object = Application.application.parameters;
					
					itemPlayer.baseURL = appParams.mediaBaseURL;
					itemPlayer.mediaAmazonS3 = appParams.awsS3;
					itemPlayer.mediaPath = _mediaPath;

					itemPlayer.displayFirstMedia(_itemMedias);
				}
			}

			public function displayMedia():void
			{
				if (mediasGrid.selectedItem)
				{
					var appParams:Object = Application.application.parameters;
					
					var mediaItem:Object = mediasGrid.selectedItem;
					
					mediaPlayer.baseURL = appParams.mediaBaseURL;
					mediaPlayer.mediaAmazonS3 = appParams.awsS3;
					mediaPlayer.mediaPath = _mediaPath;			
					mediaPlayer.openMedia(mediaItem.vo, mediaItem.type); 
				}
			}
			
			public function clearItemMediaPlayers():void
			{
				if (itemPlayer) itemPlayer.clear();
				if (mediaPlayer) mediaPlayer.clear();
			}
			
			public function clearQueryMediaPlayers():void
			{
				if (mediaMapPlayer) mediaMapPlayer.clear();
			}
			
						
			//
			// 2. Liste des commentaires d'un item
			//
			
			public function loadCommentsOfItem(itemId:Number):void
			{
				CursorManager.setBusyCursor();
				
				_ws.commentsService.getCommentByItemId(itemId);
				_ws.addEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError, false, 0, true);
			}
			
			public function onLoadCommentsOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem);
				_ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError);
			}
			
			public function onLoadCommentsOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_SUCCESS, onLoadCommentsOfItem);
				_ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENTS_BY_ITEM_ID_ERROR, onLoadCommentsOfItemError);
			
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var itemId:Number = Number(params[0]);
			
				var comments:Array = e.result as Array;
				var i:uint;
				var n:uint = comments.length;
				var commentVO:Comment;
				var commentId:Number;
				
				var dp:ArrayCollection = new ArrayCollection();

				for (i=0; i<n; i++)
				{
					commentVO = comments[i] as Comment;
					commentVO.setVoteLoaded(false);
					commentId = commentVO.id;
					
					// DATA PROVIDER : Comment
					dp.addItem(new CommentDataGridItem("Comment", commentId, commentVO, itemId, 0));
				
					// On doit récupérer les données (dont les votes de chacun des commentaires)
					_ws.datasService.getDatasByCommentId(commentId, itemId);
				}
				
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, onLoadVoteComment, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentError, false, 0, true);
				
				// Données de la grille
				_itemCommentsDataProvider = dp;
			}

			public function onLoadVoteCommentError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, onLoadVoteComment);
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentError);
			}
			
			public function onLoadVoteComment(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var commentId:Number = params[0];
				var itemId:Number = params[1];
				
				var datas:Object = e.result as Object;
				
				var dp:ArrayCollection = _itemCommentsDataProvider;
				
				var dpItem:CommentDataGridItem = getGridRowFromId(dp, commentId) as CommentDataGridItem;
				if (dpItem)
				{				
					// On met à jour :
					var vote:Number = Comment.computeVote(datas);
					
					dpItem.vote = vote;
					
					var commentVO:Comment = dpItem.vo as Comment;
					commentVO.setVote(vote);
					commentVO.setVoteLoaded(true);
				}
				
				// Si tous les votes ont été mis à jour, on supprime les listeners
				var i:int;
				var n:int = dp.length;
				var allLoaded:Boolean = true;
				
				for(i=0; i<n; i++)
				{
					dpItem = dp.getItemAt(i) as CommentDataGridItem;
					commentVO = dpItem.vo as Comment;
					
					if (! commentVO.isVoteLoaded())
					{
						allLoaded = false;
						break;
					}
				}
				
				if (allLoaded)
				{
					_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, onLoadVoteComment);
					_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_ERROR, onLoadVoteCommentError);
				}
			}			
			
			
			//
			// Mise en couleur des lignes du Datagrid des commentaires (en fonction du vote)
			//
			
			private function drawBackgroundColor(datagrid:DataGrid, rowIndex:int, color:uint):uint
			{
				var dp:ArrayCollection = datagrid.dataProvider as ArrayCollection;
				var dataObj:Object = dp.getItemAt(rowIndex);
				var vote:Number = dataObj.vo.getVote();
				
				if (isNaN(vote) || (vote == 0)) 
				{
					return 0xFFFFFF;
				}
				else 
				{
					return (vote > 0) ? 0xD0EDCE : 0xFFCDCD;
				}
			}
			
			
			
			// --------------------------------------------------------------------
			//
			// 3. Liste des données d'un item (cartographie, mots-clés...)
			//
			// --------------------------------------------------------------------
				
			public function loadDatasOfItem(itemId:Number):void
			{
				CursorManager.setBusyCursor();
				
				_ws.datasService.getDatasByItemId(itemId);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_SUCCESS , onLoadDatasOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_ERROR, onLoadDatasOfItemError, false, 0, true);
			}
			
			public function onLoadDatasOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadDatasOfItem);
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_ERROR, onLoadDatasOfItemError);
			}
			
			public function onLoadDatasOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_SUCCESS, onLoadDatasOfItem);
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ITEM_ID_METHOD_ERROR, onLoadDatasOfItemError);
				
				var datas:Object = e.result as Object;
			
			
				// Cartographie (position du centre de la carte)
				var cartoDp:ArrayCollection = new ArrayCollection();
				
				var i:uint;
				var n:uint;
				var dataVO:IVo;
				
				var dataCarto:Array = datas['Carto'];
				if (dataCarto is Array)
				{
					n = dataCarto.length;
					
					for (i=0; i<n; i++)
					{
						dataVO = dataCarto[i] as IVo;
						if (dataVO is CartoData)
						{
							cartoDp.addItem(new DataGridItem("ItemCarto", dataVO.id, dataVO));
						}
					}
				}
				
				// Données de la grille
				_itemMapPositionDataProvider = cartoDp;
				
				
				// Vote
				var voteDp:ArrayCollection = new ArrayCollection();

				var dataVote:Array = datas['Vote'];
				if (dataVote is Array)
				{
					n = dataVote.length;
					
					// trace("dataVote.length", n);
					
					for (i=0; i<n; i++)
					{
						dataVO = dataVote[i] as IVo;
						if (dataVO is VoteData)
						{
							voteDp.addItem(new DataGridItem("ItemVote", dataVO.id, dataVO));
						}
					}
				}
				
				// Données de la grille
				_itemVoteDataProvider = voteDp;
			}

			
			
			// --------------------------------------------------------------------
			//
			// 4. Liste des méta-données d'un item (mots-clés...)
			//
			// --------------------------------------------------------------------


			public function loadMetaOfItem(itemId:Number):void
			{				
				CursorManager.setBusyCursor();
				
				_ws.searchService.getMetasByVo(itemId, "Item");
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetaOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetaOfItemError, false, 0, true);
			}

			public function onLoadMetaOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetaOfItem);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetaOfItemError);
			}
			
			public function onLoadMetaOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_SUCCESS, onLoadMetaOfItem);
				_ws.removeEventListener(ServiceEvent.SEARCH_GET_METAS_BY_VO_METHOD_ERROR, onLoadMetaOfItemError);
				
				var metas:Array = e.result as Array;
			
				// Mots-clés
				var metaDp:ArrayCollection = new ArrayCollection();
				var metaKw1Dp:ArrayCollection = new ArrayCollection();
				var metaKw2Dp:ArrayCollection = new ArrayCollection();
				var metaKw3Dp:ArrayCollection = new ArrayCollection();
					
				var i:uint;
				
				if (metas is Array)
				{
					var n:uint = metas.length;
					var metaVO:Meta;
					
					for (i=0; i<n; i++)
					{
						metaVO = metas[i] as Meta;
						if (metaVO is Meta)
						{
							switch (metaVO.name)
							{
								case "KeyWord":
									metaDp.addItem(new DataGridItem("ItemKeyWord", metaVO.id, metaVO));
									break;
								
								case "Type1KeyWord":
									metaKw1Dp.addItem(new DataGridItem("ItemType1KeyWord", metaVO.id, metaVO));
									break;
								
								case "Type2KeyWord":
									metaKw2Dp.addItem(new DataGridItem("ItemType2KeyWord", metaVO.id, metaVO));
									break;
								
								case "Type3KeyWord":
									metaKw3Dp.addItem(new DataGridItem("ItemType3KeyWord", metaVO.id, metaVO));
									break;
							}
						}
					}
				}
				
				// Données de la grille
				_itemKeyWordsDataProvider = metaDp;
				_itemType1KeyWordsDataProvider = metaKw1Dp;
				_itemType2KeyWordsDataProvider = metaKw2Dp;
				_itemType3KeyWordsDataProvider = metaKw3Dp;
			}

			
			
			
			// --------------------------------------------------------------------
			//
			// 5. Utilisateur associé d'un item
			//
			// --------------------------------------------------------------------

			
			public function loadUserOfItem(itemId:Number):void
			{				
				_ws.itemsService.getUserFromItem(itemId);
				_ws.addEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_SUCCESS, onLoadUserOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_ERROR, onLoadUserOfItemError, false, 0, true);
			}
			
			public function onLoadUserOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_SUCCESS, onLoadUserOfItem);
				_ws.removeEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_ERROR, onLoadUserOfItemError);
			}
			
			public function onLoadUserOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_SUCCESS, onLoadUserOfItem);
				_ws.removeEventListener(ServiceEvent.ITEMS_GET_USER_FROM_ITEM_METHOD_ERROR, onLoadUserOfItemError);
				
				// On réinitialise la variable (videra le dataGrid via le Binding)
				_itemUsersDataProvider = new ArrayCollection();
				
				var vo:User = e.result as User;
				if (vo is User)
				{
					var userId:Number = vo.id;
					var userVO:User = getUserFromId(userId);
				
					if (userVO)
					{
						// Il ne peut y avoir qu'un utilisateur, on vide donc le dataprovider
						_itemUsersDataProvider.addItem(new DataGridItem("ItemUser", userId, userVO));
					}
				}				
			}
				
				
			
			// --------------------------------------------------------------------
			//
			// Ajout d'une entrée d'une des tables
			//
			// --------------------------------------------------------------------
			
			
			
			// 1. query :
			
			private function addQuery(e:MouseEvent):void
			{
				var userVO:User = getUserFromId(adminUserId);
				
				var queryVO:Query = new Query();
				queryVO.id = 0;
				queryVO.isValid = false;
				queryVO.setUser(adminUserVO);
				
				_ws.queriesService.addQuery(queryVO);
				_ws.addEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_SUCCESS, addQueryResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_ERROR, addQueryResultError, false, 0, true);
			}
			
			private function addQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_SUCCESS, addQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_ERROR, addQueryResultError);
			}
			
			private function addQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_SUCCESS, addQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_QUERY_METHOD_ERROR, addQueryResultError);
				
				var queryId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var queryVO:Query = new  Query(params[0]);
				queryVO.id = queryId;
				queryVO.setUser(adminUserVO);
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.QUERIES_GET_QUERY_BY_ID_METHOD_SUCCESS, getQuerySuccess, false, 0, true);
				_ws.queriesService.getQueryById(queryId);
				
				// Mise à jour du DataGrid
				_queriesDataProvider.addItem(new DataGridItem("Query", queryId, queryVO));
			}
			
			private function getQuerySuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.QUERIES_GET_QUERY_BY_ID_METHOD_SUCCESS, getQuerySuccess);
				
				var serverQueryVO:Query = e.result as Query;
				if (serverQueryVO)
				{
					var queryVO:Query = getQueryFromId(serverQueryVO.id);
					if (queryVO) queryVO.updateProps({_addDate:serverQueryVO.addDate});
				}
			}

			
			
			// 2. item :
					
			private function addItem(e:MouseEvent):void
			{
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					var itemVO:Item = new Item();
					itemVO.title = "";
					itemVO.description = "";
					itemVO.id = 0;
					itemVO.isValid = false;
					itemVO.setUser(adminUserVO);
					
					_ws.queriesService.addItemIntoQuery(itemVO, queryId);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS , addItemResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addItemResultError, false, 0, true);
				}
			}

			private function addItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS, addItemResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addItemResultError);
			}
			
			private function addItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS, addItemResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addItemResultError);
				
				var itemId:Number = Number(e.result);

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var itemVO:Item = new  Item(params[0]);
				itemVO.id = itemId;
				itemVO.setUser(adminUserVO);
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.ITEMS_GET_ITEM_BY_ID_METHOD_SUCCESS, getItemSuccess, false, 0, true);
				_ws.itemsService.getItemById(itemId);
				
				// Mise à jour du DataGrid
				_queryItemsDataProvider.addItem(new DataGridItem("Item", itemId, itemVO));
			}
			
			private function getItemSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.ITEMS_GET_ITEM_BY_ID_METHOD_SUCCESS, getItemSuccess);
				
				var serverItemVO:Item = e.result as Item;
				if (serverItemVO)
				{
					var itemVO:Item = getItemFromId(serverItemVO.id);
					if (itemVO) itemVO.updateProps({_addDate:serverItemVO.addDate});
				}
			}
			
			
			//
			// 3. media :
			//					
					
			private function addMedia(e:MouseEvent):void
			{
				addMediaBox = openDialogBox(addMediaBox, AddMediaDialogBox) as AddMediaDialogBox;
				addMediaBox.addEventListener(IdEvent.ADD, doAddMedia, false, 0, true);
			}
			
			private function doAddMedia(e:IdEvent):void
			{
				if (itemsGrid.selectedItem)
				{
					var mediaType:String = e.data;
					var mediaVO:*;
					
					var itemId:Number = itemsGrid.selectedItem.id;
					
					switch(mediaType)
					{
						case "Picture" :
							var mediaPictureVO:PictureMedia = new PictureMedia();
							mediaPictureVO.id = 0;
							mediaPictureVO.setUser(adminUserVO);
							
							_ws.itemsService.addMediaIntoItem(mediaPictureVO, itemId);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult, false, 0, true);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
							
						case "Sound" :
							var mediaSoundVO:SoundMedia = new SoundMedia();
							mediaSoundVO.id = 0;
							mediaSoundVO.setUser(adminUserVO);
							
							_ws.itemsService.addMediaIntoItem(mediaSoundVO, itemId);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult, false, 0, true);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
							
						case "Video" :
							var mediaVideoVO:VideoMedia = new VideoMedia();
							mediaVideoVO.id = 0;
							mediaVideoVO.setUser(adminUserVO);
							
							_ws.itemsService.addMediaIntoItem(mediaVideoVO, itemId);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult, false, 0, true);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
							
						case "Text" :
							var mediaTextVO:TextMedia = new TextMedia();
							mediaTextVO.id = 0;
							mediaTextVO.setUser(adminUserVO);
							
							_ws.itemsService.addMediaIntoItem(mediaTextVO, itemId);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult, false, 0, true);
							_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
					}
				}
			}		
			
			private function addMediaResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError);
			}
			
			private function addMediaResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError);
				
				var mediaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var voObject:Object = params[0];
				var mediaClassName:String = voObject.__className;
				var mediaType:String;
				

				switch(mediaClassName)
				{
					case "Vo_Media_Picture" :
						var mediaPictureVO:PictureMedia = new PictureMedia(voObject);
						mediaPictureVO.id = mediaId;
						mediaType = "Picture";
						_itemMediasDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaPictureVO));
						break;
					
					case "Vo_Media_Sound" :
						var mediaSoundVO:SoundMedia = new SoundMedia(voObject);
						mediaSoundVO.id = mediaId;
						mediaType = "Sound";
						_itemMediasDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaSoundVO));
						break;
					
					case "Vo_Media_Video" :
						var mediaVideoVO:VideoMedia = new VideoMedia(voObject);
						mediaVideoVO.id = mediaId;
						mediaType = "Video";
						_itemMediasDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaVideoVO));
						break;
					
					case "Vo_Media_Text" :
						var mediaTextVO:TextMedia = new TextMedia(voObject);
						mediaTextVO.id = mediaId;
						mediaType = "Text";
						_itemMediasDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaTextVO));
						break;
				}
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIA_BY_ID_METHOD_SUCCESS, getMediaSuccess, false, 0, true);
				_ws.mediasService.getMediaById(mediaId, mediaType);
			}
			
			private function getMediaSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.MEDIAS_GET_MEDIA_BY_ID_METHOD_SUCCESS, getMediaSuccess);
				
				var serverMediaVO:AbstractMedia = e.result as AbstractMedia;
				if (serverMediaVO)
				{
					var mediaVO:AbstractMedia = getMediaFromId(serverMediaVO.id);
					if (mediaVO) mediaVO.updateProps({_addDate:serverMediaVO.addDate});
				}
			}

			
			
			// Upload d'un media d'un item
			
			private function uploadMediaOfItem(e:MouseEvent):void
			{			
				if (itemsGrid.selectedItem)
				{
					// PopUp d'Upload
					uploadMediaBox = openDialogBox(uploadMediaBox, UploadMediaDialogBox) as UploadMediaDialogBox;
					uploadMediaBox.userId = adminUserId;
					uploadMediaBox.addEventListener(IdEvent.ADD, doUploadMediaToItem, false, 0, true);
				}
			}
			
			private function doUploadMediaToItem(e:IdEvent):void
			{
				uploadMediaBox.removeEventListener(IdEvent.ADD, doUploadMediaToItem);
					
				if (itemsGrid.selectedItem)
				{
					var mediaType:String = e.data;
					var mediaVO:AbstractMedia = uploadMediaBox.mediaVO;
					
					var itemId:Number = itemsGrid.selectedItem.id;
					
					_ws.itemsService.addMediaIntoItem(mediaVO, itemId);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addMediaResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addMediaResultError, false, 0, true);
				}
			}
			
			
			
			//
			// 4. comments :
			//
			
			private function addComment(e:MouseEvent):void
			{
				if (itemsGrid.selectedItem)
				{
					var commentVO:Comment = new Comment();
					commentVO.setUser(adminUserVO);
					commentVO.id = 0;

					var itemId:Number = itemsGrid.selectedItem.id;
					
					// Ajout du commentaire
					_ws.itemsService.addCommentIntoItem(commentVO, itemId);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError, false, 0, true);
				}
			}		

			private function addCommentResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError);
			}
			
			private function addCommentResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_SUCCESS, addCommentResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_COMMENT_INTO_ITEM_METHOD_ERROR, addCommentResultError);
				
				var commentId:Number = Number(e.result);

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;

				// Nouveau commentaire :
				var commentVO:Comment = new Comment(params[0]);
				var itemId:Number = Number(params[1]);
				var itemVO:Item = getItemFromId(itemId);
				
				commentVO.id = commentId;
				commentVO.item = itemVO;
				
				var dp:ArrayCollection = commentsGrid.dataProvider as ArrayCollection;
			    dp.addItem(new CommentDataGridItem("Comment", commentId, commentVO, itemId, 0));
				
				// Ajout du vote
				var voteVO:VoteData = new VoteData();
				voteVO.id = 0;
				voteVO.rate = 0;
				voteVO.setUser(adminUserVO);
				
				_ws.commentsService.addDataIntoComment(voteVO, commentId, 0);
				_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addCommentVoteResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addCommentVoteResultError, false, 0, true);
				
				// Mise à jour du DataGrid
				_queryItemsDataProvider.addItem(new DataGridItem("Item", itemId, itemVO));
				
				// Récupération du addDate du Commentaire
				_ws.addEventListener(ServiceEvent.COMMENTS_GET_COMMENT_BY_ID_SUCCESS, getCommentSuccess, false, 0, true);
				_ws.commentsService.getCommentById(commentId);
			}
			
			private function getCommentSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.COMMENTS_GET_COMMENT_BY_ID_SUCCESS, getCommentSuccess);
				
				var serverCommentVO:Comment = e.result as Comment;
				if (serverCommentVO)
				{
					var commentVO:Comment = getCommentFromId(serverCommentVO.id);
					if (commentVO) commentVO.updateProps({_addDate:serverCommentVO.addDate});
				}
			}

			private function addCommentVoteResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addCommentVoteResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addCommentVoteResultError);
			}
			
			private function addCommentVoteResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_SUCCESS, addCommentVoteResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_MEDIA_INTO_ITEM_METHOD_ERROR, addCommentVoteResultError);
				
				var voteId:Number = Number(e.result)

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var voteVO:VoteData = new VoteData(params[0]);
				voteVO.id = voteId;
					
				var commentId:String = params[1];
				
				var dp:ArrayCollection = commentsGrid.dataProvider as ArrayCollection;
				var i:uint;
				var n:uint = dp.length;
				var dpItem:Object;
				var voteRate:Number = voteVO.rate;
				
				for(i=0; i<n; i++)
				{
					dpItem = dp.getItemAt(i);
					
					if (dpItem.id == commentId)
					{
						// On met à jour :
						dpItem.vote = voteVO;
						dpItem.vo.setVote(voteRate);
						dpItem.vo.addDataVO(voteVO);
						
						break;
					}
				}
				
				// --> Problème avec l'extension drawBackground
				_itemCommentsDataProvider = dp;
			}


			//
			// 5.a Keywords
			//

			private function addKeyWord(e:MouseEvent):void
			{			
				var addButton:Button = e.target as Button;
				var keywordType:String = addButton.name.split("AddButton").join("");
					
				var metaVO:Meta =  new Meta();
				metaVO.name = keywordType;
				metaVO.content = "";
				metaVO.id = 0;

				_ws.searchService.addMeta(metaVO);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addKeyWordResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addKeyWordResultError, false, 0, true);
			}
			
			private function addKeyWordResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addKeyWordResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addKeyWordResultError);
			}
			
			private function addKeyWordResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addKeyWordResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addKeyWordResultError);
				
				var metaId:Number = Number(e.result);
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
			
				// trace("addKeyWordResult", metaVO.name, metaId)
				
				// Mise à jour du DataGrid
				switch (metaVO.name)
				{
					case "KeyWord":
						_keyWordsDataProvider.addItem(new DataGridItem(metaVO.name, metaId, metaVO));
						break;
					
					case "Type1KeyWord":
						_type1KeyWordsDataProvider.addItem(new DataGridItem(metaVO.name, metaId, metaVO));
						break;
					
					case "Type2KeyWord":
						_type2KeyWordsDataProvider.addItem(new DataGridItem(metaVO.name, metaId, metaVO));
						break;
					
					case "Type3KeyWord":
						_type3KeyWordsDataProvider.addItem(new DataGridItem(metaVO.name, metaId, metaVO));
						break;
				}
			}


			// Association d'une métadonnées à une VO 
			
			private function addMetaDataToGridRow(e:VOEvent):void
			{
				var vo:Object = e.vo;
				var type:String = e.param;
				
				switch(type)
				{
					case "QueryKeyWord":
					case "QueryType1KeyWord":
					case "QueryType2KeyWord":
					case "QueryType3KeyWord":
						addKeyWordToQuery(vo as Meta);
						break;
						
					case "ItemKeyWord":
					case "ItemType1KeyWord":
					case "ItemType2KeyWord":
					case "ItemType3KeyWord":
						addKeyWordToItem(vo as Meta);
						break;
						
					case "QueryMapType":
						addMapTypeToQuery(vo as Meta);
						break;
				}
			}

			private function getDataGridByDataType(type:String):DataGrid
			{			
				switch(type)
				{
					case "KeyWord"          : return keyWordsGrid;
					case "Type1KeyWord"     : return type1KeyWordsGrid;
					case "Type2KeyWord"     : return type2KeyWordsGrid;
					case "Type3KeyWord"     : return type3KeyWordsGrid;
					case "QueryKeyWord"     : return queryKeyWordGrid;
					case "QueryType1KeyWord": return queryType1KeyWordGrid;
					case "QueryType2KeyWord": return queryType2KeyWordGrid;
					case "QueryType3KeyWord": return queryType3KeyWordGrid;
					case "ItemKeyWord"      : return itemKeyWordGrid;
					case "ItemType1KeyWord" : return itemType1KeyWordGrid;
					case "ItemType2KeyWord" : return itemType2KeyWordGrid;
					case "ItemType3KeyWord" : return itemType3KeyWordGrid;
				}
				return null;
			}
			
			private function getDataProviderByDataType(type:String):ArrayCollection
			{			
				switch(type)
				{
					case "KeyWord"          : return _keyWordsDataProvider;
					case "Type1KeyWord"     : return _type1KeyWordsDataProvider;
					case "Type2KeyWord"     : return _type2KeyWordsDataProvider;
					case "Type3KeyWord"     : return _type3KeyWordsDataProvider;
					case "QueryKeyWord"     : return _queryKeyWordsDataProvider;
					case "QueryType1KeyWord": return _queryType1KeyWordsDataProvider;
					case "QueryType2KeyWord": return _queryType2KeyWordsDataProvider;
					case "QueryType3KeyWord": return _queryType3KeyWordsDataProvider;
					case "ItemKeyWord"      : return _itemKeyWordsDataProvider;
					case "ItemType1KeyWord" : return _itemType1KeyWordsDataProvider;
					case "ItemType2KeyWord" : return _itemType2KeyWordsDataProvider;
					case "ItemType3KeyWord" : return _itemType3KeyWordsDataProvider;
				}
				return null;
			}
			
			
			// Mots-clés d'une query
			
			private function selectKeyWordForQuery(e:MouseEvent):void
			{			
				var addButton:Button = e.target as Button;
				var keywordType:String = addButton.name.split("AddButton").join("");
				var datagrid:DataGrid = getDataGridByDataType(keywordType);
				
				var sourceKeywordType:String = keywordType.split("Query").join("");
				var sourceDataProvider:ArrayCollection = getDataProviderByDataType(sourceKeywordType);

				if (queriesGrid.selectedItem && datagrid && sourceDataProvider)
				{
					metaDataSelectionBox = openDialogBox(metaDataSelectionBox, MetaDataSelectionDialogBox) as MetaDataSelectionDialogBox;
					metaDataSelectionBox.addEventListener(VOEvent.ADD, addMetaDataToGridRow, false, 0, true);
					metaDataSelectionBox.metaDataType = keywordType;
					
					// On ne veut proposer que les valeurs qui ne sont pas associées
					
					// Liste des ids des mots-clés déjà liés à la query
					var dp_query:ArrayCollection = datagrid.dataProvider as ArrayCollection;
					var ids:Array = new Array();
					var i:uint;
					var n:int = dp_query.length;
					var item:Object;
					var metaVO:Meta;
					
					for (i=0 ; i<n ; i++)
					{
						item = dp_query.getItemAt(i);
						ids.push(Meta(item.vo).id);
					}
					
					// Liste complète des mots-clés
					var a:ArrayCollection = sourceDataProvider;
					
					// DataProvider du ComboBox
					var dp:ArrayCollection = new ArrayCollection();
					n = a.length;
					
					for (i=0 ; i<n ; i++)
					{
						item = a.getItemAt(i);
						metaVO = item.vo as Meta;
						
						if (ids.indexOf(metaVO.id) == -1)
						{
					 	   dp.addItem({label:metaVO.content, data:metaVO});
						}
					}
					
					// Données de la popUp :
					metaDataSelectionBox.values = dp;
				}
			}
			
			private function addKeyWordToQuery(metaVO:Meta):void
			{			
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					if (metaVO)
					{
						_ws.queriesService.addMetaIntoQuery(metaVO, queryId);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addKeyWordToQueryResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addKeyWordToQueryError, false, 0, true);
					}					
				}
			}
			
			private function addKeyWordToQueryError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addKeyWordToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addKeyWordToQueryError);
			}
			
			private function addKeyWordToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addKeyWordToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addKeyWordToQueryError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
				var keywordType:String = "Query"+metaVO.name;
				var dataProvider:ArrayCollection = getDataProviderByDataType(keywordType);
				
				dataProvider.addItem(new DataGridItem(keywordType, metaId, metaVO));
			}



			// Mots-clés d'un item
			
			private function selectKeyWordForItem(e:MouseEvent):void
			{
				var addButton:Button = e.target as Button;
				var keywordType:String = addButton.name.split("AddButton").join("");
				var datagrid:DataGrid = getDataGridByDataType(keywordType);
				
				var sourceKeywordType:String = keywordType.split("Item").join("Query");
				var sourceDataProvider:ArrayCollection = getDataProviderByDataType(sourceKeywordType);
				
				if (itemsGrid.selectedItem && datagrid && sourceDataProvider)
				{
					
					var itemId:Number = itemsGrid.selectedItem.id;
						
					var dp:ArrayCollection = datagrid.dataProvider as ArrayCollection;
					if (dp.length == 0)
					{
						metaDataSelectionBox = openDialogBox(metaDataSelectionBox, MetaDataSelectionDialogBox) as MetaDataSelectionDialogBox;
						metaDataSelectionBox.addEventListener(VOEvent.ADD, addMetaDataToGridRow, false, 0, true);
						metaDataSelectionBox.metaDataType = keywordType;
						
						// DataProvider du ComboBox
						var dp_selection:ArrayCollection = new ArrayCollection();
						
						// Liste des mots-clés liés à la query
						var dp_query:ArrayCollection = sourceDataProvider;
						var i:uint;
						var n:int = dp_query.length;
						var item:Object;
						var metaVO:Meta;
						
						for (i=0 ; i<n ; i++)
						{
							item = dp_query.getItemAt(i);
							metaVO = item.vo as Meta;
							dp_selection.addItem({label:metaVO.content, data:metaVO});
						}
						
						metaDataSelectionBox.values = dp_selection;
					}
					else
					{
						Alert.show("Vous devez supprimer le mot-clé déjà associé !");
					}
				}
			}

			private function addKeyWordToItem(metaVO:Meta):void
			{			
				if (itemsGrid.selectedItem)
				{
					var itemId:Number = itemsGrid.selectedItem.id;
					
					_ws.itemsService.addMetaIntoItem(metaVO, itemId);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_SUCCESS, addKeyWordToItemResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_ERROR, addKeyWordToItemResultError, false, 0, true);
				}
			} 
			
			private function addKeyWordToItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);	
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_SUCCESS, addKeyWordToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_ERROR, addKeyWordToItemResultError);
			}
			
			private function addKeyWordToItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_SUCCESS, addKeyWordToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_META_INTO_ITEM_METHOD_ERROR, addKeyWordToItemResultError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
				var keywordType:String = "Item" + metaVO.name;
				var dataProvider:ArrayCollection = getDataProviderByDataType(keywordType);
				
				dataProvider.addItem(new DataGridItem(keywordType, metaId, metaVO));
			}





			//
			// 5.b Cartographie
			//

			
			// Types de cartes :

			private function addMapType(e:MouseEvent):void
			{			
				var dp:ArrayCollection = mapTypesGrid.dataProvider as ArrayCollection;
				
				var metaVO:Meta =  new Meta();
				metaVO.name = "MapType";
				metaVO.content = "";
				metaVO.id = 0;

				_ws.searchService.addMeta(metaVO);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addMapTypeResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addMapTypeResultError, false, 0, true);
			}
			
			private function addMapTypeResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addMapTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addMapTypeResultError);
			}
			
			private function addMapTypeResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addMapTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addMapTypeResultError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
			    _mapTypesDataProvider.addItem(new DataGridItem("MapType", metaId, metaVO));
			}


			// Type de carte associée à une query

			private function selectMapTypeForQuery(e:MouseEvent):void
			{
				if (queriesGrid.selectedItem)
				{
					var dp:ArrayCollection = queryMapTypeGrid.dataProvider as ArrayCollection;
					if (dp.length == 0)
					{
						metaDataSelectionBox = openDialogBox(metaDataSelectionBox, MetaDataSelectionDialogBox) as MetaDataSelectionDialogBox;
						metaDataSelectionBox.addEventListener(VOEvent.ADD, addMetaDataToGridRow, false, 0, true);
						metaDataSelectionBox.metaDataType = "QueryMapType";
						
						// DataProvider du ComboBox
						var dp_selection:ArrayCollection = new ArrayCollection();
						
						// Liste des types de cartes
						var dp_maps:ArrayCollection = _mapTypesDataProvider;
						var i:uint;
						var n:int = dp_maps.length;
						var item:Object;
						var metaVO:Meta;
						
						for (i=0 ; i<n ; i++)
						{
							item = dp_maps.getItemAt(i);
							metaVO = item.vo as Meta;
							dp_selection.addItem({label:metaVO.content, data:metaVO});
						}
						
						// Données de la PopUp
						metaDataSelectionBox.values = dp_selection;
					}
					else
					{
						Alert.show("Vous devez supprimer le type de carte déjà associé !");
					}
				}
			}

			private function addMapTypeToQuery(metaVO:Meta):void
			{			
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					if (metaVO)
					{
						_ws.queriesService.addMetaIntoQuery(metaVO, queryId);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapTypeToQueryResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapTypeResultError, false, 0, true);						
					}					
				}
			}
			
			private function addMapTypeToQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapTypeToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapTypeResultError);
			}
			
			private function addMapTypeToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapTypeToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapTypeResultError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
			    _queryMapTypeDataProvider.addItem(new DataGridItem("QueryMapType", metaId, metaVO));
			}


			// Zoom de la carte associée à une query
			
			private function addQueryMapZoom(e:MouseEvent):void
			{			
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					var dp:ArrayCollection = queryMapZoomGrid.dataProvider as ArrayCollection;
					
					var metaVO:Meta =  new Meta();
					metaVO.name = "MapZoom";
					metaVO.content = "17"; // Zoom par défaut Google Maps
					metaVO.id = 0;
	
					_ws.queriesService.addMetaIntoQuery(metaVO, queryId);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapZoomToQueryResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapZoomToQueryResultError, false, 0, true);						
				}
			}
			
			private function addMapZoomToQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapZoomToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapZoomToQueryResultError);						
			}
			
			private function addMapZoomToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addMapZoomToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addMapZoomToQueryResultError);						
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
			    _queryMapZoomDataProvider.addItem(new DataGridItem("MapZoom", metaId, metaVO));
			}
			


			// Position de la carte associée à une query

			private function addCartoToQuery(e:MouseEvent):void
			{			
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
						
					var dp:ArrayCollection = queryCartoGrid.dataProvider as ArrayCollection;
					if (dp.length == 0)
					{
						var dataVO:CartoData =  new CartoData();
						dataVO.x = 0;
						dataVO.y = 0;
						
						_ws.queriesService.addDataIntoQuery(dataVO, queryId);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_SUCCESS, addCartoToQueryResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_ERROR, addCartoToQueryResultError, false, 0, true);						
					}
					else
					{
						Alert.show("Vous devez modifier la position déjà définie !");
					}
				}
			}
			
			private function addCartoToQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_SUCCESS, addCartoToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_ERROR, addCartoToQueryResultError);						
			}
			
			private function addCartoToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_SUCCESS, addCartoToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_DATA_INTO_QUERY_METHOD_ERROR, addCartoToQueryResultError);						
				
				var dataId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var dataVO:CartoData = new CartoData(params[0]);
				dataVO.id = dataId;
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getQueryDataSuccess, false, 0, true);
				_ws.datasService.getDatasById(dataId, "Carto");
				
				// Mise à jour du DataGrid
				_queryMapPositionDataProvider.addItem(new DataGridItem("QueryCarto", dataId, dataVO));
			}

			private function getQueryDataSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getQueryDataSuccess);
				
				var serverDataVO:AbstractData = e.result as AbstractData;
				
				if (serverDataVO)
				{
					var dataVO:AbstractData = getDataFromId(serverDataVO.id, "QueryCarto");
					if (dataVO) dataVO.updateProps({_addDate:serverDataVO.addDate});
				}
			}

			
			// Media de la carte associée à une query
			
			private function addQueryMediaMap(e:MouseEvent):void
			{
				if (_queryMediaMapDataProvider.length == 0)
				{
					// PopUp de Media de la carte
					addMediaBox = openDialogBox(addMediaBox, AddMediaDialogBox) as AddMediaDialogBox;
					addMediaBox.addEventListener(IdEvent.ADD, doAddMapMediaToQuery, false, 0, true);
				}
				else
				{
					Alert.show("Vous devez supprimer la carte !");
				}
			}
			
			private function doAddMapMediaToQuery(e:IdEvent):void
			{
				if (queriesGrid.selectedItem)
				{
					var mediaType:String = e.data;
					var mediaVO:*;
					
					var queryId:Number = queriesGrid.selectedItem.id;
			
					switch(mediaType)
					{
						case "Picture" :
							var mediaPictureVO:PictureMedia = new PictureMedia();
							mediaPictureVO.id = 0;
							mediaPictureVO.setUser(adminUserVO);
							
							_ws.queriesService.addMediaIntoQuery(mediaPictureVO, queryId);
							_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_SUCCESS, addMapMediaToQuery, false, 0, true);
							_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
						
						case "Video" :
							var mediaVideoVO:VideoMedia = new VideoMedia();
							mediaVideoVO.id = 0;
							mediaVideoVO.setUser(adminUserVO);
							
							_ws.queriesService.addMediaIntoQuery(mediaVideoVO, queryId);
							_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_SUCCESS, addMapMediaToQuery, false, 0, true);
							_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_ERROR, addMediaResultError, false, 0, true);
							break;
					}
				}
			}		
			
			private function addMapMediaToQuery(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_SUCCESS, addMapMediaToQuery);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_ERROR, addMediaResultError);
				
				var mediaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var voObject:Object = params[0];
				var mediaClassName:String = voObject.__className;
				var mediaType:String;
				
				switch(mediaClassName)
				{
					case "Vo_Media_Picture" :
						var mediaPictureVO:PictureMedia = new PictureMedia(voObject);
						mediaPictureVO.id = mediaId;
						mediaType = "Picture";
						_queryMediaMapDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaPictureVO));
						break;
					
					case "Vo_Media_Video" :
						var mediaVideoVO:VideoMedia = new VideoMedia(voObject);
						mediaVideoVO.id = mediaId;
						mediaType = "Video";
						_queryMediaMapDataProvider.addItem(new DataGridItem(mediaType, mediaId, mediaPictureVO));
						break;
				}
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.MEDIAS_GET_MEDIA_BY_ID_METHOD_SUCCESS, getMediaSuccess, false, 0, true);
				_ws.mediasService.getMediaById(mediaId, mediaType);
			}

			
			//
			// Upload de la carte associée à une query
			//
			
			private function uploadQueryMediaMap(e:MouseEvent):void
			{	
				if (queriesGrid.selectedItem)
				{
					if (_queryMediaMapDataProvider.length == 0)
					{
						// PopUp d'Upload
						uploadMediaBox = openDialogBox(uploadMediaBox, UploadMediaDialogBox) as UploadMediaDialogBox;
						uploadMediaBox.userId = adminUserId;
						uploadMediaBox.addEventListener(IdEvent.ADD, doUploadMapMediaToQuery, false, 0, true);
					}
					else
					{
						Alert.show("Vous devez supprimer la carte !");
					}
				}
			}

			private function doUploadMapMediaToQuery(e:IdEvent):void
			{
				uploadMediaBox.removeEventListener(IdEvent.ADD, doUploadMapMediaToQuery);
				
				if (queriesGrid.selectedItem)
				{
					var mediaType:String = e.data;
					var mediaVO:AbstractMedia = uploadMediaBox.mediaVO;
					
					var queryId:Number = queriesGrid.selectedItem.id;
					
					_ws.queriesService.addMediaIntoQuery(mediaVO, queryId);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_SUCCESS, addMapMediaToQuery, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_MEDIA_INTO_QUERY_METHOD_ERROR, addMediaResultError, false, 0, true);
				}
			}

			
			
			//
			// Position de la carte associée à un item
			//
			
			private function addCartoToItem(e:MouseEvent):void
			{			
				if (itemsGrid.selectedItem)
				{
					var itemId:Number = itemsGrid.selectedItem.id;
						
					var dp:ArrayCollection = itemCartoGrid.dataProvider as ArrayCollection;
					if (dp.length == 0)
					{
						var dataVO:CartoData =  new CartoData();
						dataVO.x = 0;
						dataVO.y = 0;
	
						_ws.itemsService.addDataIntoItem(dataVO, itemId);
						_ws.addEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addCartoToItemResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addCartoToItemResultError, false, 0, true);						
					}
					else
					{
						Alert.show("Vous devez modifier la position déjà définie !");
					}
				}
			}
			
			private function addCartoToItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addCartoToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addCartoToItemResultError);						
			}
			
			private function addCartoToItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addCartoToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addCartoToItemResultError);						
				
				var dataId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var dataVO:CartoData = new CartoData(params[0]);
				dataVO.id = dataId;
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getItemDataSuccess, false, 0, true);
				_ws.datasService.getDatasById(dataId, "Carto");
				
				// Mise à jour du DataGrid
			    _itemMapPositionDataProvider.addItem(new DataGridItem("ItemCarto", dataId, dataVO));
			}
			
			private function getItemDataSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getItemDataSuccess);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var serverDataVO:AbstractData = e.result as AbstractData;
				if (serverDataVO)
				{
					var dataVO:AbstractData = getDataFromId(serverDataVO.id, "ItemCarto");
					if (dataVO) dataVO.updateProps({_addDate:serverDataVO.addDate});
				}
			}
			

			
			
			
			
			

			
			// Vote associé à un item

			private function addVoteToItem(e:MouseEvent):void
			{			
				if (itemsGrid.selectedItem)
				{
					var itemId:Number = itemsGrid.selectedItem.id;
					
					var dp:ArrayCollection = itemVoteGrid.dataProvider as ArrayCollection;
					if (dp.length == 0)
					{
						var dataVO:VoteData =  new VoteData();
						dataVO.rate = 0;
						dataVO.setUser(adminUserVO);
						
						_ws.itemsService.addDataIntoItem(dataVO, itemId);
						_ws.addEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addVoteToItemResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addVoteToItemResultError, false, 0, true);						
					}
					else
					{
						Alert.show("Vous devez supprimer le vote déjà défini !");
					}
				}
			}
			
			private function addVoteToItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addVoteToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addVoteToItemResultError);						
			}
			
			private function addVoteToItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_SUCCESS, addVoteToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_ADD_DATA_INTO_ITEM_METHOD_ERROR, addVoteToItemResultError);						
				
				var dataId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var dataVO:VoteData = new VoteData(params[0]);;
				dataVO.id = dataId;
				
				_itemVoteDataProvider.addItem(new DataGridItem("ItemVote", dataId, dataVO));
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getItemVoteSuccess, false, 0, true);
				_ws.datasService.getDatasById(dataId, "Vote");
			}
			
			private function getItemVoteSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_ID_METHOD_SUCCESS, getItemVoteSuccess);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var serverDataVO:AbstractData = e.result as AbstractData;
				if (serverDataVO)
				{
					var dataVO:AbstractData = getDataFromId(serverDataVO.id, "ItemVote");
					if (dataVO) dataVO.updateProps({_addDate:serverDataVO.addDate});
				}
			}
			

			

			
			//			
			// Types de meta-données :
			//
			
			private function addDataType(e:MouseEvent):void
			{			
				var dp:ArrayCollection = dataTypesGrid.dataProvider as ArrayCollection;
				
				CursorManager.setBusyCursor();
				
				var metaVO:Meta =  new Meta();
				metaVO.name = "";
				metaVO.content = "";
				metaVO.id = 0;
				
				_ws.searchService.addMeta(metaVO);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addDataTypeResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addDataTypeResultError, false, 0, true);
			}
			
			private function addDataTypeResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addDataTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addDataTypeResultError);
			}
			
			private function addDataTypeResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_SUCCESS, addDataTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_ADD_META_METHOD_ERROR, addDataTypeResultError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
				_dataTypesDataProvider.addItem(new DataGridItem("DataType", metaId, metaVO));
			}

			
			// Pour une Query
			
			private function addDataTypeToQuery(e:MouseEvent):void
			{
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					var metaVO:Meta =  new Meta();
					metaVO.name = "";
					metaVO.content = "";
					metaVO.id = 0;
					
					_ws.queriesService.addMetaIntoQuery(metaVO, queryId);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addDataTypeToQueryResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addDataTypeResultError, false, 0, true);						
				}
			}
			
			private function addDataTypeToQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addDataTypeToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addDataTypeResultError);
			}
			
			private function addDataTypeToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_SUCCESS, addDataTypeToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_META_INTO_QUERY_METHOD_ERROR, addDataTypeResultError);
				
				var metaId:Number = Number(e.result);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var metaVO:Meta = new Meta(params[0]);
				metaVO.id = metaId;
				
				_queryDataTypeDataProvider.addItem(new DataGridItem("QueryDataType", metaId, metaVO));
			}
			
			
			
			
			
			//
			// 6 Users
			//
			
			
			// Utilisateur associé à une query
			
			private function selectUserForQuery(e:MouseEvent):void
			{
				if (queriesGrid.selectedItem)
				{
					userSelectionBox = openDialogBox(userSelectionBox, UserSelectionDialogBox) as UserSelectionDialogBox;
					userSelectionBox.addEventListener(VOEvent.ADD, addUserToGridRow, false, 0, true);
					userSelectionBox.userType = "QueryUser";
					
					// Données de la PopUp
					userSelectionBox.values = getUsersInArrayCollection("admin");
					
					if (_queryUsersDataProvider.length > 0)
					{
						// Utilisateur actuellement associé
						var dataGridItem:DataGridItem = _queryUsersDataProvider.getItemAt(0) as DataGridItem;
						userSelectionBox.selected = getIndexOfUser(dataGridItem.vo as User);
					}
				}
			}

			// Retrouve l'index d'un userVO dans la liste des utilisateurs
			private function getIndexOfUser(userVOToFind:User):int
			{			
				// Liste des utilisateurs
				var dp_users:ArrayCollection = _usersDataProvider;
				var i:uint;
				var n:int = dp_users.length;
				var item:Object;
				var userVO:User;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_users.getItemAt(i);
					userVO = item.vo as User;
					
					if (userVO == userVOToFind) return i;
				}
				
				return -1;
			}


			private function getUserFromId(id:uint):User
			{			
				// Liste des utilisateurs
				var dp_users:ArrayCollection = _usersDataProvider;
				var i:uint;
				var n:int = dp_users.length;
				var item:Object;
				var userVO:User;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_users.getItemAt(i);
					userVO = item.vo as User;
					
					if (userVO.id == id) return userVO;
				}
				
				return null;
			}

			private function getQueryFromId(id:uint):Query
			{			
				// Liste des queries
				var dp_queries:ArrayCollection = _queriesDataProvider;
				var i:uint;
				var n:int = dp_queries.length;
				var item:Object;
				var queryVO:Query;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_queries.getItemAt(i);
					queryVO = item.vo as Query;
					
					if (queryVO.id == id) return queryVO;
				}
				
				return null;
			}

			
			private function getMediaFromId(id:uint):AbstractMedia
			{			
				// Liste des medias
				var dp_medias:ArrayCollection = _itemMediasDataProvider;
				var i:uint;
				var n:int = dp_medias.length;
				var item:Object;
				var mediaVO:AbstractMedia;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_medias.getItemAt(i);
					mediaVO = item.vo as AbstractMedia;
					
					if (mediaVO.id == id) return mediaVO;
				}
				
				return null;
			}
			
			private function getKeyWordFromId(id:uint):Meta
			{			
				// Liste des metas keyword
				var dp_metas:ArrayCollection = _keyWordsDataProvider;
				var i:uint;
				var n:int = dp_metas.length;
				var item:Object;
				var metaVO:Meta;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_metas.getItemAt(i);
					metaVO = item.vo as Meta;
					
					if (metaVO.id == id) return metaVO;
				}
				
				return null;
			}
			
			private function getDataFromId(id:uint, dataType:String):AbstractData
			{	
				// Liste des metas keyword
				var dp_datas:ArrayCollection;
				
				switch(dataType)
				{
					case "QueryCarto":
						dp_datas = _queryMapPositionDataProvider;
						break;
					
					case "ItemCarto":
						dp_datas = _itemMapPositionDataProvider;
						break;
					
					case "ItemVote":
						dp_datas = _itemVoteDataProvider;
						break;
					
					default:
						return null;
				}
				
				if (dp_datas)
				{
					var i:uint;
					var n:int = dp_datas.length;
					var item:Object;
					var dataVO:AbstractData;
					
					for (i=0 ; i<n ; i++)
					{
						item = dp_datas.getItemAt(i);
						dataVO = item.vo as AbstractData;
						
						if (dataVO.id == id) return dataVO;
					}
				}
				
				return null;
			}
			
			
			
			
			// Peuplera le comboBox de sélection d'un utilisateur
			private function getUsersInArrayCollection(role:String = ""):ArrayCollection
			{			
			
				var dp_selection:ArrayCollection = new ArrayCollection();
				
				// Liste des utilisateurs
				var dp_users:ArrayCollection = _usersDataProvider;
				var i:uint;
				var n:int = dp_users.length;
				var item:Object;
				var userVO:User;
				var label:String;
				
				for (i=0 ; i<n ; i++)
				{
					item = dp_users.getItemAt(i);
					userVO = item.vo as User;
					
					if (role != "")
					{
						// On filtre selon le role
						if (userVO.role != role) continue;
					}
					
					label = userVO.pseudo + " (" + userVO.firstName + " " + userVO.lastName + ")";
						
					dp_selection.addItem({label:label, data:userVO});
				}
			
				return dp_selection;
			}
			
			
			private function addUserToQuery(userVO:User):void
			{			
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					if (userVO)
					{
						// ws.param = userVO;
						_ws.queriesService.setUserOfQuery(userVO.id, queryId);
						_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_SUCCESS, addUserToQueryResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_ERROR, addUserToQueryResultError, false, 0, true);						
					}					
				}
			}
			
			private function addUserToQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_SUCCESS, addUserToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_ERROR, addUserToQueryResultError);						
			}
			
			private function addUserToQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_SUCCESS, addUserToQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_ERROR, addUserToQueryResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var userId:Number = params[0];
				var userVO:User = getUserFromId(userId);
				
				// var queryId:Number = params[1];
				
				// Il ne peut y avoir qu'un utilisateur, on vide donc le dataprovider
				_queryUsersDataProvider = new ArrayCollection();
				_queryUsersDataProvider.addItem(new DataGridItem("QueryUser", userId, userVO));
			}

			
			// Utilisateur associé à une item
			
			private function selectUserForItem(e:MouseEvent):void
			{
				if (itemsGrid.selectedItem)
				{
					userSelectionBox = openDialogBox(userSelectionBox, UserSelectionDialogBox) as UserSelectionDialogBox;
					userSelectionBox.addEventListener(VOEvent.ADD, addUserToGridRow, false, 0, true);
					userSelectionBox.userType = "ItemUser";
					
					// Données de la PopUp
					userSelectionBox.values = getUsersInArrayCollection();
					
					if (_itemUsersDataProvider.length > 0)
					{
						// Utilisateur actuellement associé
						var dataGridItem:DataGridItem = _itemUsersDataProvider.getItemAt(0) as DataGridItem;
						userSelectionBox.selected = getIndexOfUser(dataGridItem.vo as User);
					}
				}
			}
			
			private function addUserToItem(userVO:User):void
			{			
				if (itemsGrid.selectedItem)
				{
					var itemId:Number = itemsGrid.selectedItem.id;
					
					if (userVO)
					{
						_ws.itemsService.setUserOfItem(userVO.id, itemId);
						_ws.addEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_SUCCESS, addUserToItemResult, false, 0, true);
						_ws.addEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_ERROR, addUserToItemResultError, false, 0, true);						
					}					
				}
			}
			
			private function addUserToItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_SUCCESS, addUserToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_ERROR, addUserToItemResultError);						
			}
			
			private function addUserToItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_SUCCESS, addUserToItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_USER_OF_ITEM_METHOD_ERROR, addUserToItemResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var userId:Number = params[0];
				var userVO:User = getUserFromId(userId);
				
				// var itemId:Number = params[1];
				
				// Il ne peut y avoir qu'un utilisateur, on vide donc le dataprovider
				_itemUsersDataProvider = new ArrayCollection();
				_itemUsersDataProvider.addItem(new DataGridItem("ItemUser", userId, userVO));
			}
			
			
			// Association d'un user à une VO 
			
			private function addUserToGridRow(e:VOEvent):void
			{
				var vo:Object = e.vo;
				var type:String = e.param;
				
				switch(type)
				{
					case "QueryUser":
						addUserToQuery(vo as User);
						break;
					
					case "ItemUser":
						addUserToItem(vo as User);
						break;
				}
			}
			
			
			
			// Déplacement d'un item dans une autre question
			
			private function initChangeQueryOfItem():void
			{
				if (changeQueryOfItemComboBox && _queriesDataProvider) 
				{	
					var i:uint;
					var n:uint = _queriesDataProvider.length;
					
					var dp:ArrayCollection = new ArrayCollection();
					var item:Object;
					var queryVo:Query;
					var label:String;
					
					var currentQueryId:Number = queriesGrid.selectedItem.id;
					
					for(i=0; i<n; i++)
					{
						item = _queriesDataProvider.getItemAt(i);
						queryVo = item.vo as Query;
						
						if (queryVo.id != currentQueryId)
						{
							label = "[ id : " + queryVo.id + " ] " + (queryVo.content != null ? queryVo.content : "");
							
							dp.addItem({label:label, id:queryVo.id, vo:queryVo});
						}
					}
					
					// Données du comboBox
					changeQueryOfItemComboBox.dataProvider = dp;
				}
			}			
			
			private function onChangeQueryOfItem(e:ListEvent):void
			{
			}
			
			private function validChangeQueryOfItem(e:Event):void
			{
				CursorManager.setBusyCursor();
				
				var queryId:Number = changeQueryOfItemComboBox.selectedItem.id;
				var itemId:Number = itemsGrid.selectedItem.id;
				var itemVO:Item = itemsGrid.selectedItem.vo;
				
				// Dans la base, on doit ajouter l'item à la nouvelle question...
				_ws.queriesService.addItemIntoQuery(itemVO, queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS , addToChangeQueryOfItem, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addToChangeQueryOfItemError, false, 0, true);
			}
			
			private function addToChangeQueryOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS, addToChangeQueryOfItem);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addToChangeQueryOfItemError);
			}
			
			private function addToChangeQueryOfItem(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_SUCCESS, addToChangeQueryOfItem);
				_ws.removeEventListener(ServiceEvent.QUERIES_ADD_ITEM_FROM_QUERY_METHOD_ERROR, addToChangeQueryOfItemError);
				
				// et supprimer l'item à l'ancienne question...
				
				var itemId:Number = itemsGrid.selectedItem.id;
				var itemVO:Item = itemsGrid.selectedItem.vo;
				
				// Ancienne et nouvelle question
				var newQueryId:Number = changeQueryOfItemComboBox.selectedItem.id;;
				var oldQueryId:Number = queriesGrid.selectedItem.id;
				
				// _queryItemsDataProvider.addItem(new DataGridItem("Item", itemId, itemVO));
			
				
				// Mise à jour du Dataprovider de l'ancienne query
				removeRowWithId(_queryItemsDataProvider, itemId);
				
				// Reset de l'interface (onglet items de la query en cours)
				resetItemInterface();
				
				// On doit supprimer l'association ancienne query/itemId dans la base
				

				_ws.queriesService.removeItemFromQuery(itemId, oldQueryId);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_SUCCESS , removeToChangeQueryOfItemResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_ERROR, removeToChangeQueryOfItemError, false, 0, true);

				// wsr.param = newQueryId;
			}			
			
			private function removeToChangeQueryOfItemError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_SUCCESS , removeToChangeQueryOfItemResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_ERROR, removeToChangeQueryOfItemError);
			}
			
			private function removeToChangeQueryOfItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_SUCCESS , removeToChangeQueryOfItemResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_ITEM_INTO_QUERY_METHOD_ERROR, removeToChangeQueryOfItemError);
				
				
				// On sélectionne la nouvelle question pour vérifier que l'item a été déplacé:
				/*
				var newQueryId:Number = ws.param as Number;
				
				var i:uint;
				var n:uint = _queriesDataProvider.length;
				var item:Object;
				var queryVo:QueryVO;
				
				for(i=0; i<n; i++)
				{
					item = _queriesDataProvider.getItemAt(i);
					queryVo = item.vo as QueryVO;
					
					if (queryVo.id == newQueryId)
					{
						queriesGrid.selectedIndex = i;
						loadDetailsOfQuery();
						break;
					}
				}
				*/
			}
			
			private function resetItemInterface():void
			{
				_itemMediasDataProvider = new ArrayCollection();
				_itemCommentsDataProvider = new ArrayCollection();
				_itemKeyWordsDataProvider = new ArrayCollection();
				_itemType1KeyWordsDataProvider = new ArrayCollection();
				_itemType2KeyWordsDataProvider = new ArrayCollection();
				_itemType3KeyWordsDataProvider = new ArrayCollection();
				_itemMapPositionDataProvider = new ArrayCollection();
				_itemUsersDataProvider = new ArrayCollection();
				_itemVoteDataProvider = new ArrayCollection();
				
				clearItemMediaPlayers();
				
				// Liste des questions de l'item sélectionné
				if (changeQueryOfItemComboBox) changeQueryOfItemComboBox.dataProvider = new ArrayCollection();
				
				if (itemTabNavigator) itemTabNavigator.selectedIndex = 0;
			}
			
			
			
			
			
			// --------------------------------------------------------------------
			//
			// Suppression d'une entrée d'une des tables
			//
			// --------------------------------------------------------------------
			
			private function deleteGridRow(e:DeleteGridRowEvent):void
			{
				var type:String = e.data.type;
				var id:Number = e.data.id;
				
				okCancel = openDialogBox(okCancel, DeleteVODialogBox) as DeleteVODialogBox;
				okCancel.voId = id;
				okCancel.voType = type;
				okCancel.title = "Suppression (" + type + " / id = " + id + ")";
				okCancel.message = "Voulez-vous vraiment supprimer cette donnée ?" 
				okCancel.addEventListener(VOEvent.DELETE, doDeleteGridRow, false, 0, true);
			}
			
			private function doDeleteGridRow(e:IdEvent):void
			{
				var id:Number = e.id;
				var type:String = e.data;
				
				switch(type)
				{
					case "Query":
						deleteQuery(id);
						break;
						
					case "Item":
						deleteItem(id);
						break;
						
					case "Picture":
						deleteMedia(id, "Picture");
						break;
						
					case "Video":
						deleteMedia(id, "Video");
						break;
						
					case "Sound":
						deleteMedia(id, "Sound");
						break;
						
					case "Text":
						deleteMedia(id, "Text");
						break;
						
					case "Comment":
						deleteComment(id);
						break;
						
					case "QueryCarto":
						deleteQueryCarto(id);
						break;
						
					case "QueryMapType":
						deleteQueryMapType(id);
						break;					
					
					case "QueryMapZoom":
						deleteQueryMapZoom(id);
						break;					
					
					case "QueryKeyWord":
					case "QueryType1KeyWord":
					case "QueryType2KeyWord":
					case "QueryType3KeyWord":
						deleteQueryKeyWord(id);
						break;

					case "DataType":
						deleteDataType(id);
						break;
					
					case "QueryDataType":
						deleteQueryDataType(id);
						break;

					case "ItemKeyWord":
					case "ItemType1KeyWord":
					case "ItemType2KeyWord":
					case "ItemType3KeyWord":
						deleteItemKeyWord(id);
						break;
						
					case "KeyWord":
					case "Type1KeyWord":
					case "Type2KeyWord":
					case "Type3KeyWord":
						deleteKeyWord(id);
						break;
					
					case "User":
						deleteUser(id);
						break;
					
					case "QueryUser":
						deleteQueryUser(id);
						break;
					
					case "ItemUser":
						deleteItemUser(id);
						break;
					
					case "ItemCarto":
						deleteItemCarto(id);
						break;
					
					case "ItemVote":
						deleteItemVote(id);
						break;
				}
			}
			
			
			//
			// Suppression d'une query
			//

			private function deleteQuery(queryId:Number):void
			{
				_ws.queriesService.deleteQuery(queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_SUCCESS, deleteQueryResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_ERROR, deleteQueryResultError, false, 0, true);						
			}

			private function deleteQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_SUCCESS, deleteQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_ERROR, deleteQueryResultError);						
			}
			
			private function deleteQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_SUCCESS, deleteQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_DELETE_QUERY_METHOD_ERROR, deleteQueryResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var queryId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_queriesDataProvider, queryId);
				
				// On vide la grille des items, des commentaires et celle des médias
				_queryItemsDataProvider = new ArrayCollection();
				_queryKeyWordsDataProvider = new ArrayCollection();
				_queryMapPositionDataProvider = new ArrayCollection();
				_queryMapTypeDataProvider = new ArrayCollection();
				_queryUsersDataProvider = new ArrayCollection();

				_itemMediasDataProvider = new ArrayCollection();
				_itemCommentsDataProvider = new ArrayCollection();
				_itemKeyWordsDataProvider = new ArrayCollection();
				_itemMapPositionDataProvider = new ArrayCollection();
				
				
				clearItemMediaPlayers();
			}
			
			private function removeRowWithId(dp:ArrayCollection, id:Number, type:String = ""):Boolean
			{
				var i:uint;
				var n:uint = dp.length;
				var item:Object;
				
				for(i=0; i<n; i++)
				{
					item = dp.getItemAt(i);
					if (type == "")
					{
						// Cas général : on supprime l'élément d'après l'id
						if (item.id == id) 
						{
							dp.removeItemAt(i);
							return true;
						}
					}
					else 
					{
						// Cas particulier des médias : on supprime l'élément d'après l'id + le type
						if ((item.id == id) && (item.type == type))
						{
							dp.removeItemAt(i);
							return true;
						}
					}
				}
				return false;
			}
			
						
			//
			// Suppression d'un item
			//
					
			private function deleteItem(itemId:Number):void
			{
				_ws.itemsService.deleteItem(itemId);
				_ws.addEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_SUCCESS, deleteItemResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_ERROR, deleteItemResultError, false, 0, true);						
			}
			
			private function deleteItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_SUCCESS, deleteItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_ERROR, deleteItemResultError);						
			}
			
			private function deleteItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_SUCCESS, deleteItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_DELETE_ITEM_METHOD_ERROR, deleteItemResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var itemId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_queryItemsDataProvider, itemId);
				
				_itemMediasDataProvider = new ArrayCollection();
				_itemCommentsDataProvider = new ArrayCollection();
				_itemKeyWordsDataProvider = new ArrayCollection();
				_itemMapPositionDataProvider = new ArrayCollection();
				_itemUsersDataProvider = new ArrayCollection();
				_itemVoteDataProvider = new ArrayCollection();
				
				clearItemMediaPlayers();
			}
					
			//
			// Suppression d'un commentaire
			//
			
			private function deleteComment(commentId:Number):void
			{
				_ws.commentsService.deleteComment(commentId);
				_ws.addEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_SUCCESS, deleteCommentResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_ERROR, deleteCommentResultError, false, 0, true);						
			}
			
			private function deleteCommentResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_SUCCESS, deleteCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_ERROR, deleteCommentResultError);						
			}
			
			private function deleteCommentResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_SUCCESS, deleteCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_DELETE_COMMENT_ERROR, deleteCommentResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var commentId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_itemCommentsDataProvider, commentId);
			}
					
			//
			// Suppression d'un media
			//
			
			private function deleteMedia(mediaId:Number, mediaType:String):void
			{
				_ws.mediasService.deleteMedia(mediaId, mediaType);
				_ws.addEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_SUCCESS, deleteMediaResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_ERROR, deleteMediaResultError, false, 0, true);						
			}
			
			private function deleteMediaResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_SUCCESS, deleteMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_ERROR, deleteMediaResultError);						
			}
			
			private function deleteMediaResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_SUCCESS, deleteMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_DELETE_MEDIA_METHOD_ERROR, deleteMediaResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var mediaId:Number = Number(params[0]);
				var mediaType:String = params[1];
				
				// Mise à jour du Datagrid
				var r:Boolean = removeRowWithId(_itemMediasDataProvider, mediaId, mediaType);
				if (!r) r = removeRowWithId(_queryMediaMapDataProvider, mediaId, mediaType);
			}


			//
			// Suppression d'une métadonnée (keyword)
			//
			

			private function deleteQueryKeyWord(metaId:Number):void
			{
				var queryId:Number = queriesGrid.selectedItem.id;
				
				_ws.queriesService.removeMetaFromQuery(metaId, queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS , deleteQueryKeyWordResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryKeyWordResultError, false, 0, true);						
			}
			
			private function deleteQueryKeyWordResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryKeyWordResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryKeyWordResultError);						
			}
			
			private function deleteQueryKeyWordResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryKeyWordResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryKeyWordResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);

				var isDeleted:Boolean;
				
				// Mise à jour du Datagrid
				isDeleted = removeRowWithId(_queryKeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_queryType1KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_queryType2KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_queryType3KeyWordsDataProvider, metaId);
			}

						
			private function deleteKeyWord(metaId:Number):void
			{
				_ws.searchService.deleteMeta(metaId);
				_ws.addEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteKeyWordResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteKeyWordResultError, false, 0, true);						
			}
			
			private function deleteKeyWordResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteKeyWordResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteKeyWordResultError);						
			}
			
			private function deleteKeyWordResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);
				
				var isDeleted:Boolean;
				
				// Mise à jour du Datagrid
				isDeleted = removeRowWithId(_keyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_type1KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_type2KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_type3KeyWordsDataProvider, metaId);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteKeyWordResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteKeyWordResultError);						
			}			
			

			private function deleteItemKeyWord(metaId:Number):void
			{
				var itemId:Number = itemsGrid.selectedItem.id;
				
				_ws.itemsService.removeMetaFromItem(metaId, itemId);
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_META_FROM_ITEM_METHOD_SUCCESS, deleteItemKeyWordResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_META_FROM_ITEM_METHOD_ERROR, deleteItemKeyWordResultError, false, 0, true);						
			}
			
			private function deleteItemKeyWordResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_META_FROM_ITEM_METHOD_SUCCESS, deleteItemKeyWordResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_META_FROM_ITEM_METHOD_ERROR, deleteItemKeyWordResultError);						
			}
			
			private function deleteItemKeyWordResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemKeyWordResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemKeyWordResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);

				var isDeleted:Boolean;
				
				// Mise à jour du Datagrid
				isDeleted = removeRowWithId(_itemKeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_itemType1KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_itemType2KeyWordsDataProvider, metaId);
				if (!isDeleted) isDeleted = removeRowWithId(_itemType3KeyWordsDataProvider, metaId);
				
				// trace("deleteItemKeyWordResult", metaId, isDeleted);
			}

			
			
			//
			// Suppression d'une données de cartographie
			//
			
			private function deleteQueryCarto(dataId:Number):void
			{
				_ws.datasService.deleteData(dataId, "Carto");
				_ws.addEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_SUCCESS, deleteQueryCartoResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_ERROR, deleteQueryCartoResultError, false, 0, true);						
				
			}
			
			private function deleteQueryCartoResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_SUCCESS, deleteQueryCartoResult);
				_ws.removeEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_ERROR, deleteQueryCartoResultError);						
			}
			
			private function deleteQueryCartoResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_SUCCESS, deleteQueryCartoResult);
				_ws.removeEventListener(ServiceEvent.DATAS_DELETE_DATA_METHOD_ERROR, deleteQueryCartoResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var dataId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_queryMapPositionDataProvider, dataId);
			}

			
			
			private function deleteQueryMapZoom(metaId:Number):void
			{
				var queryId:Number = queriesGrid.selectedItem.id;
				
				_ws.queriesService.removeMetaFromQuery(metaId, queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapZoomResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapZoomResultError, false, 0, true);						
			}
			
			private function deleteQueryMapZoomResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapZoomResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapZoomResultError);						
			}
			
			private function deleteQueryMapZoomResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapZoomResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapZoomResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_queryMapZoomDataProvider, metaId);
			}


			
			
			private function deleteQueryMapType(metaId:Number):void
			{
				var queryId:Number = queriesGrid.selectedItem.id;
				
				_ws.queriesService.removeMetaFromQuery(metaId, queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapTypeResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapTypeResultError, false, 0, true);						
			}
			
			private function deleteQueryMapTypeResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapTypeResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapTypeResultError);						
			}
			
			private function deleteQueryMapTypeResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryMapTypeResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryMapTypeResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);

				// Mise à jour du Datagrid
				removeRowWithId(_queryMapTypeDataProvider, metaId);
			}
			
			
			
			private function deleteItemCarto(dataId:Number):void
			{
				_ws.datasService.deleteData(dataId, "Carto");
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemCartoResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemCartoResultError, false, 0, true);						
			}
			
			private function deleteItemCartoResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemCartoResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemCartoResultError);						
			}
			
			private function deleteItemCartoResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemCartoResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemCartoResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var dataId:Number = Number(params[0]);

				// Mise à jour du Datagrid
				removeRowWithId(_itemMapPositionDataProvider, dataId);
			}

			

			private function deleteItemVote(dataId:Number):void
			{
				_ws.datasService.deleteData(dataId, "Vote");
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemVoteResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemVoteResultError, false, 0, true);						
			}
			
			private function deleteItemVoteResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemVoteResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemVoteResultError);						
			}
			
			private function deleteItemVoteResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_SUCCESS, deleteItemVoteResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_REMOVE_DATA_FROM_ITEM_METHOD_ERROR, deleteItemVoteResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var dataId:Number = Number(params[0]);

				// Mise à jour du Datagrid
				removeRowWithId(_itemVoteDataProvider, dataId);
			}
			
			
			
			
			private function deleteUser(userId:Number):void
			{
				_ws.usersService.deleteUser(userId);
				_ws.addEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_SUCCESS, deleteUserResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_ERROR, deleteUserResultError, false, 0, true);						
			}

			private function deleteUserResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_SUCCESS, deleteUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_ERROR, deleteUserResultError);						
			}
			
			private function deleteUserResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_SUCCESS, deleteUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_DELETE_USER_METHOD_ERROR, deleteUserResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var userId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_usersDataProvider, userId);
			}
			
			private function deleteQueryUser(userId:Number):void
			{
				if (queriesGrid.selectedItem)
				{
					var queryId:Number = queriesGrid.selectedItem.id;
					
					_ws.queriesService.setUserOfQuery(0, queryId);
					_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_SUCCESS, addUserToQueryResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_ERROR, addUserToQueryResultError, false, 0, true);						
				}
			}
			
			private function deleteItemUser(userId:Number):void
			{
				if (itemsGrid.selectedItem)
				{
					var itemId:Number = itemsGrid.selectedItem.id;
					
					_ws.itemsService.setUserOfItem(0, itemId);
					_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_SUCCESS, addUserToItemResult, false, 0, true);
					_ws.addEventListener(ServiceEvent.QUERIES_SET_USER_OF_QUERY_METHOD_ERROR, addUserToItemResultError, false, 0, true);						
				}
			}

			//
			// Suppression d'une metadonnée 
			//

			private function deleteDataType(metaId:Number):void
			{
				var metaId:Number = dataTypesGrid.selectedItem.id;
				
				_ws.searchService.deleteMeta(metaId);
				_ws.addEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteDataTypeResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteDataTypeResultError, false, 0, true);						
			}
			
			private function deleteDataTypeResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteDataTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteDataTypeResultError);						
			}
			
			private function deleteDataTypeResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_SUCCESS, deleteQueryDataTypeResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_DELETE_META_METHOD_ERROR, deleteDataTypeResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_dataTypesDataProvider, metaId);
			}			
			
			
			
			private function deleteQueryDataType(metaId:Number):void
			{
				var queryId:Number = queriesGrid.selectedItem.id;
				
				_ws.queriesService.removeMetaFromQuery(metaId, queryId);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryDataTypeResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryDataTypeResultError, false, 0, true);						
			}
			
			private function deleteQueryDataTypeResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryDataTypeResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryDataTypeResultError);						
			}
			
			private function deleteQueryDataTypeResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_SUCCESS, deleteQueryDataTypeResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_REMOVE_META_FROM_QUERY_METHOD_ERROR, deleteQueryDataTypeResultError);						
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaId:Number = Number(params[0]);
				
				// Mise à jour du Datagrid
				removeRowWithId(_queryDataTypeDataProvider, metaId);
			}			
			

			// --------------------------------------------------------------------
			//
			// Modification des données
			//
			// --------------------------------------------------------------------

			private function editGridRow(e:EditGridRowEvent):void
			{
				var vo:Object = e.data.vo;
				var type:String = e.data.type;
				
				trace("editGridRow type", type);
				
				switch(type)
				{
					case "Query":
						editQuery(vo as Query);
						break;
						
					case "Item":
						editItem(vo as Item);
						break;
						
					case "Picture":
					case "Video":
					case "Sound":
						editMedia(vo, type);
						break;
						
					case "Text":
						editText(vo as TextMedia);
						break;
						
					case "Comment":
						editComment(vo as Comment);
						break;
						
					case "QueryCarto":
					case "ItemCarto":
						editDataCarto(vo as CartoData);
						break;
					
					case "ItemVote":
						editDataVote(vo as VoteData);
						break;
						
					case "MapType":
					case "KeyWord":
					case "Type1KeyWord":
					case "Type2KeyWord":
					case "Type3KeyWord":
					case "MapZoom":
						editMetaData(vo as Meta, type);
						break;
					
					case "User":
						editUser(vo as User);
						break;
					
					case "DataType":
					case "QueryDataType":
						editMetaDataWithName(vo as Meta, type);
						break;
				}
			}

			
			// Modification d'une Query
			
			private function editQuery(vo:Query):void
			{
				queryBox = openDialogBox(queryBox, QueryDialogBox) as QueryDialogBox;
				queryBox.addEventListener(VOEvent.CHANGE, changeQueryVO, false, 0, true);
				queryBox.vo = vo;
			}
			
			private function changeQueryVO(e:VOEvent):void
			{
				var queryVO:Query = e.vo as Query;
				
				var q:Query = new Query(queryVO.getSerialisableObject());
				
				_ws.queriesService.setQuery(q);
				_ws.addEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_SUCCESS, changeQueryResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_ERROR, changeQueryResultError, false, 0, true);			
			}
			
			private function changeQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_SUCCESS, changeQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_ERROR, changeQueryResultError);						
			}
			
			private function changeQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_SUCCESS, changeQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_SET_QUERY_METHOD_ERROR, changeQueryResultError);						
			}
			

			// Modification d'un Item

			private function editItem(vo:Item):void
			{
				itemBox = openDialogBox(itemBox, ItemDialogBox) as ItemDialogBox;
				itemBox.addEventListener(VOEvent.CHANGE, changeItemVO, false, 0, true);
				itemBox.vo = vo;
			}
			
			private function changeItemVO(e:VOEvent):void
			{
				var itemVO:Item = e.vo as Item;
				
				_ws.itemsService.setItem(itemVO);
				_ws.addEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_SUCCESS, changeItemResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_ERROR, changeItemResultError, false, 0, true);						
			}
			
			private function changeItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_SUCCESS, changeItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_ERROR, changeItemResultError);						
			}
			
			private function changeItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_SUCCESS, changeItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_SET_ITEM_METHOD_ERROR, changeItemResultError);						
			}


			// Modification d'un Media Video, Son, ou Image

			private function editMedia(vo:Object, mediaType:String):void
			{
				mediaBox = openDialogBox(mediaBox, MediaDialogBox) as MediaDialogBox;
				mediaBox.addEventListener(VOEvent.CHANGE, changeMediaVO, false, 0, true);
				mediaBox.vo = vo;
				mediaBox.mediaType = mediaType;
			}
			
			private function changeMediaVO(e:VOEvent):void
			{
				_ws.mediasService.setMedia(e.vo as AbstractMedia);
				_ws.addEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaResultError, false, 0, true);						
			}
			
			private function changeMediaResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaResultError);						
			}
			
			private function changeMediaResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaResultError);						
			}
			

			// Modification d'un Media Texte

			private function editText(vo:TextMedia):void
			{
				mediaTextBox = openDialogBox(mediaTextBox, MediaTextDialogBox) as MediaTextDialogBox;
				mediaTextBox.addEventListener(VOEvent.CHANGE, changeMediaTextVO, false, 0, true);
				mediaTextBox.vo = vo;
			}
			
			private function changeMediaTextVO(e:VOEvent):void
			{
				var mediaVO:TextMedia = e.vo as TextMedia;
				
				_ws.mediasService.setMedia(mediaVO);
				_ws.addEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaTextResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaTextResultError, false, 0, true);						
			}
			
			private function changeMediaTextResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaTextResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaTextResultError);						
			}
			
			private function changeMediaTextResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_SUCCESS, changeMediaTextResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_SET_MEDIA_METHOD_ERROR, changeMediaTextResultError);						
			}

			
			// Modification d'un Commentaire

			private function editComment(vo:Comment):void
			{
				commentBox = openDialogBox(commentBox, CommentDialogBox) as CommentDialogBox;
				commentBox.addEventListener(VOEvent.CHANGE, changeCommentsVO, false, 0, true);
				commentBox.vo = vo;
				commentBox.vote = vo.getVote();
			}
			
			private function changeCommentsVO(e:VOEvent):void
			{
				var commentVO:Comment = e.vo as Comment;
				var vote:Number = commentVO.getVote();
				
				var c:Comment = new Comment(commentVO.getSerialisableObject());
				c.setVote(vote);
				
				// Mise à jour du CommentVO :
				_ws.commentsService.setComment(c);
				_ws.addEventListener(ServiceEvent.COMMENTS_SET_COMMENT_SUCCESS, changeCommentResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.COMMENTS_SET_COMMENT_ERROR, changeCommentResultError, false, 0, true);						
				
				// Mise à jour du vote
				var dp:ArrayCollection = _itemCommentsDataProvider;
				var dpItem:CommentDataGridItem = getGridRowFromId(dp, commentVO.id) as CommentDataGridItem;
				if (dpItem)
				{				
					dpItem.vote = vote;
				}
				_itemCommentsDataProvider = dp;
				_itemCommentsDataProvider.refresh();	
			}
			
			private function changeCommentResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_SET_COMMENT_SUCCESS, changeCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_SET_COMMENT_ERROR, changeCommentResultError);						
			}
			
			private function changeCommentResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_SET_COMMENT_SUCCESS, changeCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_SET_COMMENT_ERROR, changeCommentResultError);						

				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var commentVO:Comment = new Comment(params[0]);

				// On doit rechercher le vote associé à ce commentaire
				var itemId:Number = itemsGrid.selectedItem.id;
				
				_ws.datasService.getDatasByCommentId(commentVO.id, itemId);
				_ws.addEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, getDataForChangedCommentResult, false, 0, true);
			}

			
			private function getDataForChangedCommentResult(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.DATAS_GET_DATAS_BY_COMMENT_ID_METHOD_SUCCESS, getDataForChangedCommentResult);
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var commentId:Number = params[0];
				var itemId:Number = params[1];
				
				var datas:Object = e.result as Object;
				
				if (datas)
				{
					var votes:Array = datas["Vote"];
					if (votes)
					{
						var voteVO:VoteData = votes[0];
						if (voteVO)
						{
							//
							// Il y avait déjà un vote :
							//
							
							var commentVO:Comment = getCommentFromId(commentId);
							
							voteVO.rate = commentVO.getVote();
							
							_ws.datasService.setData(voteVO);
							_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeVoteResult, false, 0, true);
							_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeVoteResultError, false, 0, true);						
						}
					}
				}
			}				
			
			private function changeVoteResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeVoteResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeVoteResultError);						
			}
			
			private function changeVoteResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeVoteResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeVoteResultError);						
				
				/*
				// Mise à jour du Datagrid du commentaire
				var dp:ArrayCollection = _itemCommentsDataProvider;
				
				var dpItem:CommentDataGridItem = getGridRowFromId(dp, commentId) as CommentDataGridItem;
				if (dpItem)
				{				
					// On met à jour :
					var vote:Number = Comment.computeVote(datas);
					
					dpItem.vote = vote;
					
					var commentVO:Comment = dpItem.vo as Comment;
					commentVO.setVote(vote);
					
					
					// --> MultiVoCollection(voParent:IVo, voType:String, source:Object = null)
					commentVO.datas = new MultiVoCollection(commentVO, "Comment", datas);
				}
				*/
			}
			
			
			// Méta données d'un item
			
			private function selectKeyWord(vo:Meta):void
			{
			}
			
			
			// Méta données
			
			private function editMetaData(vo:Meta, type:String):void
			{
				metaDataBox = openDialogBox(metaDataBox, MetaDataDialogBox) as MetaDataDialogBox;
				metaDataBox.addEventListener(VOEvent.CHANGE, changeMetaData, false, 0, true);
				metaDataBox.vo = vo;
			}
			
			private function editMetaDataWithName(vo:Meta, type:String):void
			{
				metaDataWithSelectionNameBox = openDialogBox(metaDataWithSelectionNameBox, MetaDataWithSelectionNameDialogBox) as MetaDataWithSelectionNameDialogBox;
				metaDataWithSelectionNameBox.addEventListener(VOEvent.CHANGE, changeMetaData, false, 0, true);
				metaDataWithSelectionNameBox.dataType = type;
				metaDataWithSelectionNameBox.vo = vo;
			}
			
			private function changeMetaData(e:VOEvent):void
			{
				var metaVO:Meta = e.vo as Meta;
					
				// Mise à jour du DataCarteVO :
				_ws.searchService.setMeta(metaVO);
				_ws.addEventListener(ServiceEvent.SEARCH_SET_META_METHOD_SUCCESS, changeMetaDataResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.SEARCH_SET_META_METHOD_ERROR, changeMetaDataResultError, false, 0, true);						
			}	
			
			private function changeMetaDataResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.SEARCH_SET_META_METHOD_SUCCESS, changeMetaDataResult);
				_ws.removeEventListener(ServiceEvent.SEARCH_SET_META_METHOD_ERROR, changeMetaDataResultError);						
			}
			
			private function changeMetaDataResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				var metaVO:Meta = new Meta(params[0]);
				var type:String = metaVO.name;
				
				switch(type)
				{
					case "MapType":
						break;
					
					case "KeyWord":
						break;
					
					case "MapZoom":
						break;				 
					
					case "DataType":
						break;				 
				}
			}


			
			private function editDataVote(vo:VoteData):void
			{
				voteBox = openDialogBox(voteBox, VoteDialogBox) as VoteDialogBox;
				voteBox.addEventListener(VOEvent.CHANGE, changeVoteVO, false, 0, true);
				voteBox.vo = vo;
				voteBox.vote = vo.rate;
			}
			
			private function changeVoteVO(e:VOEvent):void
			{
				var voteVO:VoteData = e.vo as VoteData;
				var vote:Number = voteVO.rate;
				
				// Mise à jour du DataVoteVO :
				_ws.datasService.setData(voteVO);
				_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataVoteVOResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataVoteVOResultError, false, 0, true);						
			}	
			
			private function changeDataVoteVOResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataVoteVOResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataVoteVOResultError);						
			}
			
			private function changeDataVoteVOResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataVoteVOResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataVoteVOResultError);						
			}

			
			
			// Cartographie
			
			private function editDataCarto(vo:CartoData):void
			{
				dataCartoBox = openDialogBox(dataCartoBox, DataCartoDialogBox) as DataCartoDialogBox;
				dataCartoBox.addEventListener(VOEvent.CHANGE, changeDataCartoVO, false, 0, true);
				dataCartoBox.width = stage.width * 0.9;
				dataCartoBox.height = stage.height * 0.9;
				dataCartoBox.x = stage.width * 0.05;
				dataCartoBox.y = stage.height * 0.05;
				dataCartoBox.vo = vo;
				
				applyCurrentQueryCartoSettings(dataCartoBox);
			}
			
			private function applyCurrentQueryCartoSettings(dataCartoBox:DataCartoDialogBox):void
			{
				if ((_queryMapZoomDataProvider.length > 0) && (_queryMapTypeDataProvider.length > 0) && (_queryMapPositionDataProvider.length > 0))
				{
					var queryMapZoom:Meta = _queryMapZoomDataProvider.getItemAt(0).vo as Meta;
					var queryMapTypeVO:Meta = _queryMapTypeDataProvider.getItemAt(0).vo as Meta;
					var queryCartoVO:CartoData = _queryMapPositionDataProvider.getItemAt(0).vo as CartoData;
					
					dataCartoBox.mapZoom = Number(queryMapZoom.content);
					dataCartoBox.mapType = queryMapTypeVO.content;
					dataCartoBox.mapCenterLatitude = queryCartoVO.x;
					dataCartoBox.mapCenterLongitude = queryCartoVO.y;
				}
				else
				{
					Alert.show("Vérifier que les données Carto de la Query ont été définies", "Item Carto");
				}
			}
			
			private function changeDataCartoVO(e:VOEvent):void
			{
				var dataCarteVO:CartoData = e.vo as CartoData;
				
				// Mise à jour du DataCarteVO :
				_ws.datasService.setData(dataCarteVO);
				_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataCartoVOResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataCartoVOResultError, false, 0, true);						
			}	
			
			private function changeDataCartoVOResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataCartoVOResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataCartoVOResultError);						
			}
			
			private function changeDataCartoVOResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_SUCCESS, changeDataCartoVOResult);
				_ws.removeEventListener(ServiceEvent.DATAS_SET_DATA_METHOD_ERROR, changeDataCartoVOResultError);						
			}
			
			
			// Modification d'un User
			
			private function editUser(vo:User):void
			{
				userBox = openDialogBox(userBox, UserDialogBox) as UserDialogBox;
				userBox.addEventListener(VOEvent.CHANGE, changeUserVO, false, 0, true);
				userBox.vo = vo;
			}
			
			private function changeUserVO(e:VOEvent):void
			{
				var userVO:User = e.vo as User;
				
				_ws.usersService.setUser(userVO);
				_ws.addEventListener(ServiceEvent.USERS_SET_USER_METHOD_SUCCESS, changeUserResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_SET_USER_METHOD_ERROR, changeUserResultError, false, 0, true);
				
			}
			
			private function changeUserResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var userVO:User = new User(params[0]);
				
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_METHOD_SUCCESS, changeUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_METHOD_ERROR, changeUserResultError);						
				
				// On met à jour le mot de passe
				if (userVO) changeUserPassword(userVO);
			}
			
			private function changeUserResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				// alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_METHOD_SUCCESS, changeUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_METHOD_ERROR, changeUserResultError);						
			}

			
			/* NEW *: changement de mot de passe */
			
			private function changeUserPassword(userVO:User):void
			{
				_ws.usersService.setUserPassword(userVO);
				_ws.addEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_SUCCESS, changeUserPasswordResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_ERROR, changeUserPasswordResultError, false, 0, true);						
			}
			
			private function changeUserPasswordResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_SUCCESS, changeUserPasswordResult);
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_ERROR, changeUserPasswordResultError);						
			}
			
			private function changeUserPasswordResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				// alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_SUCCESS, changeUserPasswordResult);
				_ws.removeEventListener(ServiceEvent.USERS_SET_USER_PASSWORD_METHOD_ERROR, changeUserPasswordResultError);						
			}
			
			
			// --------------------------------------------------------------------
			//
			// Pops Ups
			//
			// --------------------------------------------------------------------

			private function openDialogBox(dialog:TitleWindow, dialogClass:Class):TitleWindow
			{
				// Lazy loading :
				
				if (!dialog)
				{
					dialog = PopUpManager.createPopUp(this, dialogClass, true) as TitleWindow;
				}
				else
				{
					PopUpManager.addPopUp(dialog,this,true);
				}
				
				// Affichage :
				PopUpManager.centerPopUp(dialog);
				
				return dialog;
			}
			
			
			

			// --------------------------------------------------------------------
			//
			// Validation des VOs
			//
			// --------------------------------------------------------------------

			private function validGridRow(e:ValidGridRowEvent):void
			{
				var vo:Object = e.data.vo;
				var type:String = e.data.type;
				
				switch(type)
				{
					case "Query":
						validQuery(vo as Query);
						break;
						
					case "Item":
						validItem(vo as Item);
						break;
						
					case "Picture":
					case "Video":
					case "Sound":
					case "Text":
						validMedia(vo, type);
						break;
						
					case "Comment":
						validComment(vo as Comment);
						break;
					
					case "User":
						validUser(vo as User);
						break;
				}
			}

			
			// Validation d'une Query
			
			private function validQuery(vo:Query):void
			{
				_ws.queriesService.validateQuery(vo.id, vo.isValid);
				_ws.addEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_SUCCESS, validQueryResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_ERROR, validQueryResultError, false, 0, true);						
			}
			
			private function validQueryResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_SUCCESS, validQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_ERROR, validQueryResultError);						
			}
			
			private function validQueryResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_SUCCESS, validQueryResult);
				_ws.removeEventListener(ServiceEvent.QUERIES_VALIDATE_QUERY_METHOD_ERROR, validQueryResultError);						
			}


			// Validation d'un Item

			private function validItem(vo:Item):void
			{
				_ws.itemsService.validateItem(vo.id, vo.isValid);
				_ws.addEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_SUCCESS, validItemResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_ERROR, validItemResultError, false, 0, true);						
			}
			
			private function validItemResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_SUCCESS, validItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_ERROR, validItemResultError);
			}
			
			private function validItemResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_SUCCESS, validItemResult);
				_ws.removeEventListener(ServiceEvent.ITEMS_VALIDATE_ITEM_METHOD_ERROR, validItemResultError);
			}


			// Validation d'un Media Text, on, ou Image

			private function validMedia(vo:Object, mediaType:String):void
			{
				_ws.mediasService.validateMedia(vo.id, mediaType, vo.isValid);
				_ws.addEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_SUCCESS, validMediaResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_ERROR, validMediaResultError, false, 0, true);						
			}
			
			private function validMediaResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_SUCCESS, validMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_ERROR, validMediaResultError);						
			}
			
			private function validMediaResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_SUCCESS, validMediaResult);
				_ws.removeEventListener(ServiceEvent.MEDIAS_VALIDATE_MEDIA_METHOD_ERROR, validMediaResultError);						
			}
			

			// Validation d'un Commentaire

			private function validComment(vo:Comment):void
			{
				_ws.commentsService.validateComment(vo.id, vo.isValid);
				_ws.addEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_SUCCESS, validCommentResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_ERROR, validCommentResultError, false, 0, true);						
			}
			
			private function validCommentResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_SUCCESS, validCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_ERROR, validCommentResultError);						
			}
			
			private function validCommentResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_SUCCESS, validCommentResult);
				_ws.removeEventListener(ServiceEvent.COMMENTS_VALIDATE_COMMENT_ERROR, validCommentResultError);						
			}

			
			// Validation d'un Utilisateur
			
			private function validUser(vo:User):void
			{
				_ws.usersService.banUser(vo.id);
				_ws.addEventListener(ServiceEvent.USERS_BAN_USER_METHOD_SUCCESS, validUserResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_BAN_USER_METHOD_ERROR, validUserResultError, false, 0, true);						
			}
			
			private function validUserResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_BAN_USER_METHOD_SUCCESS, validUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_BAN_USER_METHOD_ERROR, validUserResultError);						
			}
			
			private function validUserResult(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				_ws.removeEventListener(ServiceEvent.USERS_BAN_USER_METHOD_SUCCESS, validUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_BAN_USER_METHOD_ERROR, validUserResultError);						
			}
			
			
			
			
			// --------------------------------------------------------------------
			//
			// Liste des utilisateurs
			//
			// --------------------------------------------------------------------
			
			private function addUser(e:MouseEvent):void
			{	
				var userVO:User = new User();
				userVO.id = 0;
				
				_ws.usersService.addUser(userVO);
				_ws.addEventListener(ServiceEvent.USERS_ADD_USER_METHOD_SUCCESS, addUserResult, false, 0, true);
				_ws.addEventListener(ServiceEvent.USERS_ADD_USER_METHOD_ERROR, addUserResultError, false, 0, true);						
			}		
			
			private function addUserResultError(e:ServiceEvent):void
			{
				CursorManager.removeBusyCursor();
				
				alertError(e);
				
				_ws.removeEventListener(ServiceEvent.USERS_ADD_USER_METHOD_SUCCESS, addUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_ADD_USER_METHOD_ERROR, addUserResultError);						
			}
			
			private function addUserResult(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.USERS_ADD_USER_METHOD_SUCCESS, addUserResult);
				_ws.removeEventListener(ServiceEvent.USERS_ADD_USER_METHOD_ERROR, addUserResultError);						
				
				var userId:Number = Number(e.result)
					
				var request:AbstractServiceRequest = e.request;
				var params:Array = request.params;
				
				var userVO:User = new User(params[0]);
				userVO.id = userId;
				
				// Récupération du addDate
				_ws.addEventListener(ServiceEvent.USERS_GET_USER_BY_ID_METHOD_SUCCESS, getUserByIdSuccess, false, 0, true);
				_ws.usersService.getUserById(userId);
					
				// Mise à jour du DataGrid
				_usersDataProvider.addItem(new DataGridItem("User", userId, userVO));
			}
			
			private function getUserByIdSuccess(e:ServiceEvent):void
			{
				_ws.removeEventListener(ServiceEvent.USERS_GET_USER_BY_ID_METHOD_SUCCESS, getUserByIdSuccess);
				
				var serverUserVO:User = e.result as User;
				if (serverUserVO)
				{
					var userVO:User = getUserFromId(serverUserVO.id);
					if (userVO) userVO.updateProps({_addDate:serverUserVO.addDate});
				}
			}
			
			private function uploadMediaUser(e:MouseEvent):void
			{
				if (usersGrid.selectedItem)
				{
					// PopUp d'Upload
					uploadMediaBox = openDialogBox(uploadMediaBox, UploadMediaDialogBox) as UploadMediaDialogBox;
					uploadMediaBox.userId = adminUserId;
					uploadMediaBox.addEventListener(IdEvent.ADD, doUploadMediaUser, false, 0, true);
				}
			}			
			
			private function doUploadMediaUser(e:IdEvent):void
			{
				uploadMediaBox.removeEventListener(IdEvent.ADD, doUploadMediaToItem);
				
				if (usersGrid.selectedItem)
				{
					var mediaType:String = e.data;
					var mediaVO:AbstractMedia = uploadMediaBox.mediaVO;
					
					var userId:Number = usersGrid.selectedItem.id;
					
					// TODO...
				}
			}

			
			
			// --------------------------------------------------------------------
			//
			// Liste des sessions
			//
			// --------------------------------------------------------------------
			
			
			
			
			
			// --------------------------------------------------------------------
			//
			// Onglets
			//
			// --------------------------------------------------------------------
			
			private function onGeneralTabChange(event:Event):void
			{
				if (generalTabNavigator.selectedIndex == 1)
				{
					otherTypesKeyWordVBox.visible = isBBC() || isMJC();
					type1KeyWordLabel.text = "Type1";
					type2KeyWordLabel.text = "Type2";
					type3KeyWordLabel.text = "Type3";
					
				}
			}
			
			private function onQueryTabChange(event:Event):void
			{
				if (queryTabNavigator.selectedIndex == 1)
				{					
					queryOtherTypesKeyWordVBox.visible = isBBC() || isMJC();
					queryType1KeyWordLabel.text = "Type1";
					queryType2KeyWordLabel.text = "Type2";
					queryType3KeyWordLabel.text = "Type3";
				}
				else if (queryTabNavigator.selectedIndex == 2)
				{
					displayMediaMaps();
				}
			}
			
			private function isBBC():Boolean
			{
				return _ws.apiKey == ProjectsApiKeys.WS_API_KEY_BonheurBrut;
			}
			
			private function isMJC():Boolean
			{
				return [
					ProjectsApiKeys.WS_API_KEY_MJC_Nogent,
					ProjectsApiKeys.WS_API_KEY_MJC_Vitry,
					ProjectsApiKeys.WS_API_KEY_MJC_Bonneuil,
					ProjectsApiKeys.WS_API_KEY_MJC_Nanterre,
					ProjectsApiKeys.WS_API_KEY_MJC_Paris4,
					ProjectsApiKeys.WS_API_KEY_MJC_Chilly
				].indexOf (_ws.apiKey ) != -1;
			}
			
			private function onItemTabChange(event:Event):void
			{
				if (itemTabNavigator.selectedIndex == 0)
				{
					displayItem();
				}
				else if (itemTabNavigator.selectedIndex == 2)
				{
					if (isBBC())
					{
						itemOtherTypesKeyWordVBox.visible = true;
						itemType1KeyWordLabel.text = "Type1";
						itemType2KeyWordLabel.text = "Type2";
						itemType3KeyWordLabel.text = "Type3";
					}
					else if (isMJC())
					{
						itemOtherTypesKeyWordVBox.visible = true;
						itemType1KeyWordLabel.text = "Type1";
						itemType2KeyWordLabel.text = "Type2";
						itemType3KeyWordLabel.text = "Type3";
					}
				}
				else if (itemTabNavigator.selectedIndex == 7)
				{
					initChangeQueryOfItem();
				}
			}
			
			private function getGridRowFromId(dp:ArrayCollection, id:Number):DataGridItem
			{
				var i:uint;
				var n:uint = dp.length;
				var dpItem:DataGridItem;
				for(i=0; i<n; i++)
				{
					dpItem = dp.getItemAt(i) as DataGridItem;
					
					if (dpItem.id == id)
					{
						return dpItem;
					}
				}
				return null;
			}		
			
			// Décoonexion
			private function disconnectUser(e:Event):void
			{
				e.stopPropagation();
				
				stage.focus = null;
				
				dispatchEvent(new Event(UserEvent.DISCONNECT, true));
			}
		]]>
	</mx:Script>
	



	<mx:HBox width="100%" height="100%" paddingLeft="5" paddingTop="5" paddingBottom="5" paddingRight="4">
	
		<mx:TabNavigator id="generalTabNavigator" width="100%" height="100%" paddingBottom="5" paddingRight="5" change="onGeneralTabChange(event)">

			<!-- ONGLET GENERAL -->
			<!-- Queries -->
					
			<mx:HBox label= "Queries" width="100%" height="100%">
			
				<mx:VBox width="20%" height="100%" paddingLeft="5" paddingRight="5">
					<mx:HBox>
						<mx:Label text="Questions" styleName="titre" />
						<mx:Button label="+" id="addQueryButton" click="addQuery(event)" styleName="addButton" />				
					</mx:HBox>
					<mx:DataGrid width="100%"  height="100%" id="queriesGrid" dataProvider="{_queriesDataProvider}" variableRowHeight="true" itemClick="loadDetailsOfQuery();">
						<mx:columns>
						    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
						    <mx:DataGridColumn dataField="titre" itemRenderer="admin.renderers.ContentRenderer" />
						    <mx:DataGridColumn width="25" itemRenderer="admin.renderers.ValidCheckBoxRenderer" />
						    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
						    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				
				<mx:VBox width="80%" height="100%">
				
					<mx:HBox height="22" width="100%" horizontalAlign="right">
						<mx:Button label="Se déconnecter" id="disconnectButton" click="disconnectUser(event)" styleName="" />		
					</mx:HBox>
				
					<mx:TabNavigator id="queryTabNavigator" width="100%" height="100%" paddingBottom="5" change="onQueryTabChange(event)">
						
						<!-- ONGLET QUERY-->
						<!-- Items d'une query -->
						
						<mx:HBox label="Items de la question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
						
							<mx:VBox width="25%" height="100%">
								<mx:HBox>
									<mx:Label text="Items" styleName="titre" />
									<mx:Button label="+" id="addItemButton" click="addItem(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" height="100%" id="itemsGrid" dataProvider="{_queryItemsDataProvider}" variableRowHeight="true" itemClick="loadDetailsOfItem();" >
									<mx:columns>
									    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									    <mx:DataGridColumn dataField="titre" itemRenderer="admin.renderers.TitleRenderer" />
									    <mx:DataGridColumn width="25" itemRenderer="admin.renderers.ValidCheckBoxRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>


							<mx:TabNavigator id="itemTabNavigator" width="75%" height="100%" change="onItemTabChange(event)">
							
								<!-- ONGLET ITEM -->
								<!-- Media Player -->
								
								<mx:VBox label="Item" width="25%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:VBox width="200" height="100%" styleName="VBoxDebug">
										<mx:Label text="" styleName="titre" />
										<component:CustomMediaPlayer id="itemPlayer" width="173" height="132" />
									</mx:VBox>
								</mx:VBox>
								
								<!-- ONGLET ITEM -->
								<!-- Medias d'un item -->
								
								<mx:HBox label="Medias" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:VBox width="100%" height="100%">
										<mx:HBox>
											<mx:Label text="Medias" styleName="titre" />
											<mx:Button label="+" id="addMediaButton" click="addMedia(event)" styleName="addButton" />				
										</mx:HBox>
										<mx:DataGrid width="100%" height="100%" id="mediasGrid" dataProvider="{_itemMediasDataProvider}" itemClick="displayMedia();">
											<mx:columns>
											    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
											    <mx:DataGridColumn dataField="titre" itemRenderer="admin.renderers.TitleRenderer" />
											    <mx:DataGridColumn dataField="content" itemRenderer="admin.renderers.MediaRenderer" />
											    <mx:DataGridColumn width="25" itemRenderer="admin.renderers.ValidCheckBoxRenderer" />
											    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
											    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									<mx:VBox width="200" height="100%" styleName="VBoxDebug">
										<mx:Label text="" styleName="titre" />
										<component:CustomMediaPlayer id="mediaPlayer"  width="173" height="132" />
										<mx:Button label="upload" id="uploadMedia" click="uploadMediaOfItem(event)" styleName="addButton" />				

									</mx:VBox>
								</mx:HBox>
						
								<!-- ONGLET ITEM -->
								<!-- Mot-clé d'un item -->
								
								<mx:VBox label="Mot-clé" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									
									<!-- Mot-clé d'un item -->
									<mx:VBox  id="itemKeyWordVBox" width="100%">
										<mx:HBox>
											<mx:Label text="Mot-clé" styleName="titre" />
											<mx:Button label="+" id="ItemKeyWordAddButton" click="selectKeyWordForItem(event)" styleName="addButton" />				
										</mx:HBox>
										<mx:DataGrid width="100%" id="itemKeyWordGrid" dataProvider="{_itemKeyWordsDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemKeyWordsDataProvider.length}" >
											<mx:columns>
											    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
											    <mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
											    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
									
									<!-- Mot-clés BBC d'un item -->
									<mx:VBox  id="itemOtherTypesKeyWordVBox" width="100%" paddingTop="20">
										
										<mx:HBox id="itemType1KeyWordHBox">
											<mx:Label id="itemType1KeyWordLabel" text="Type1" styleName="titre" />
											<mx:Button label="+" id="ItemType1KeyWordAddButton" click="selectKeyWordForItem(event)" styleName="addButton" />				
										</mx:HBox>
										<mx:DataGrid width="100%" id="itemType1KeyWordGrid" dataProvider="{_itemType1KeyWordsDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemType1KeyWordsDataProvider.length}" >
											<mx:columns>
												<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
												<mx:DataGridColumn dataField="nom" itemRenderer="admin.renderers.ContentRenderer" />
												<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
											</mx:columns>
										</mx:DataGrid>
										
										<mx:HBox id="itemType2KeyWordHBox">
											<mx:Label id="itemType2KeyWordLabel" text="Type2" styleName="titre" />
											<mx:Button label="+" id="ItemType2KeyWordAddButton" click="selectKeyWordForItem(event)" styleName="addButton" />				
										</mx:HBox>
										<mx:DataGrid width="100%" id="itemType2KeyWordGrid" dataProvider="{_itemType2KeyWordsDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemType2KeyWordsDataProvider.length}" >
											<mx:columns>
												<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
												<mx:DataGridColumn dataField="nom" itemRenderer="admin.renderers.ContentRenderer" />
												<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
											</mx:columns>
										</mx:DataGrid>
										
										<mx:HBox id="itemType3KeyWordHBox">
											<mx:Label id="itemType3KeyWordLabel" text="Type3" styleName="titre" />
											<mx:Button label="+" id="ItemType3KeyWordAddButton" click="selectKeyWordForItem(event)" styleName="addButton" />				
										</mx:HBox>
										<mx:DataGrid width="100%" id="itemType3KeyWordGrid" dataProvider="{_itemType3KeyWordsDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemType3KeyWordsDataProvider.length}" >
											<mx:columns>
												<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
												<mx:DataGridColumn dataField="nom" itemRenderer="admin.renderers.ContentRenderer" />
												<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
											</mx:columns>
										</mx:DataGrid>
									</mx:VBox>
								</mx:VBox>
																	
								<!-- ONGLET ITEM -->
								<!-- Position d'un item -->
								
								<mx:VBox label="Carte" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Position sur la carte" styleName="titre" />
										<mx:Button label="+" id="addItemCartoButton" click="addCartoToItem(event)" styleName="addButton" />				
									</mx:HBox>
									<mx:DataGrid width="100%" id="itemCartoGrid" dataProvider="{_itemMapPositionDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemMapPositionDataProvider.length}" >
										<mx:columns>
										    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										    <mx:DataGridColumn dataField="position" itemRenderer="admin.renderers.CartoRenderer" />
										    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
										    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
								
								<!-- ONGLET ITEM -->
								<!-- Vote d'un item -->
								
								<mx:VBox label="Vote" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Vote" styleName="titre" />
										<mx:Button label="+" id="addItemVoteButton" click="addVoteToItem(event)" styleName="addButton" />				
									</mx:HBox>
									<mx:DataGrid width="100%" id="itemVoteGrid" dataProvider="{_itemVoteDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemVoteDataProvider.length}" >
										<mx:columns>
											<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
											<mx:DataGridColumn dataField="vote" itemRenderer="admin.renderers.RateRenderer" />
											<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
											<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
								
								<!-- ONGLET ITEM -->
								<!-- Commentaires d'un item -->
								
								<mx:VBox label="Commentaires" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Comments" styleName="titre" />
										<mx:Button label="+" id="addCommentButton" click="addComment(event)" styleName="addButton" />				
									</mx:HBox>
									<extension:RowColorDataGrid id="commentsGrid" dataProvider="{_itemCommentsDataProvider}"  
										width="100%" height="100%" variableRowHeight="true" alternatingItemColors="#FFFFFF"
										editable="false" rowColorFunction="drawBackgroundColor" horizontalGridLineColor="#CCCCCC" horizontalGridLines="true" >
										<extension:columns>
											<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										    <mx:DataGridColumn dataField="content" itemRenderer="admin.renderers.ContentRenderer" />
											<mx:DataGridColumn itemRenderer="admin.renderers.VoteRenderer" />
										    <mx:DataGridColumn width="25" itemRenderer="admin.renderers.ValidCheckBoxRenderer" />
										    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
										    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
										</extension:columns>
									</extension:RowColorDataGrid>			
								</mx:VBox>
								
								<!-- ONGLET ITEM -->
								<!-- Utilisateurs associés à l'item -->
								
								<mx:VBox label="Utilisateur associé à l'item" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Utilisateur" styleName="titre" />
										<mx:Button label="+" id="addUserToItemButton" click="selectUserForItem(event)" styleName="addButton" />				
									</mx:HBox>
									<mx:DataGrid width="100%"  id="itemUsersGrid" dataProvider="{_itemUsersDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_itemUsersDataProvider.length}" >
										<mx:columns>
											<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
											<mx:DataGridColumn dataField="pseudo" itemRenderer="admin.renderers.UserPseudoRenderer" color="#FF0000" />
											<mx:DataGridColumn dataField="firstName" itemRenderer="admin.renderers.UserFirstNameRenderer" />
											<mx:DataGridColumn dataField="lastName" itemRenderer="admin.renderers.UserLastNameRenderer" />
											<mx:DataGridColumn dataField="role" itemRenderer="admin.renderers.UserRoleRenderer" color="#FF0000" />
											<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
								
								
								<!-- ONGLET ITEM -->
								<!-- Question de l'item -->
								
								<mx:VBox label="Question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Déplacer l'item vers une autre question" styleName="titre" />
									</mx:HBox>
									<mx:VBox width="100%">
										<mx:Label text="Choisissez la nouvelle question et validez :" styleName="" />
										<mx:HBox width="100%">
											<mx:ComboBox id="changeQueryOfItemComboBox" change="onChangeQueryOfItem(event);" width="100%"  />
											<mx:Button label="Ok" id="changeQueryOfItemButton" click="validChangeQueryOfItem(event)" />	
										</mx:HBox>
									</mx:VBox>
								</mx:VBox>
								
								
								<!-- ONGLET ITEM -->
								<!-- Vignette de l'item -->
								
								<mx:VBox label="Vignette" width="100%" height="100%" paddingLeft="5" paddingRight="5">
									<mx:HBox>
										<mx:Label text="Créer une vignette" styleName="titre" />
									</mx:HBox>
									<mx:VBox>
									</mx:VBox>
								</mx:VBox>
							</mx:TabNavigator>
						</mx:HBox>

						
						<!-- ONGLET QUERY -->
						<!-- Mots-clé d'une query -->
						
						<mx:VBox label="Mots-clés de la question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
							
							<!-- Mots-clé d'une query -->
							<mx:VBox id="queryKeyWordVBox" width="100%">
								<mx:HBox>
									<mx:Label text="Mots-clés" styleName="titre" />
									<mx:Button label="+" id="QueryKeyWordAddButton" click="selectKeyWordForQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryKeyWordGrid" dataProvider="{_queryKeyWordsDataProvider}" variableRowHeight="false" rowCount="{_queryKeyWordsDataProvider.length}" >
									<mx:columns>
									    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									    <mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
							
							<!-- Mots-clé BBC d'une query -->
							<mx:VBox id="queryOtherTypesKeyWordVBox" width="100%">
								<mx:HBox>
									<mx:Label id="queryType1KeyWordLabel" text="Type1" styleName="titre" />
									<mx:Button label="+" id="QueryType1KeyWordAddButton" click="selectKeyWordForQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryType1KeyWordGrid" dataProvider="{_queryType1KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_queryType1KeyWordsDataProvider.length}" >
									<mx:columns>
										<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
								<mx:HBox>
									<mx:Label id="queryType2KeyWordLabel" text="Type2" styleName="titre" />
									<mx:Button label="+" id="QueryType2KeyWordAddButton" click="selectKeyWordForQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryType2KeyWordGrid" dataProvider="{_queryType2KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_queryType2KeyWordsDataProvider.length}" >
									<mx:columns>
										<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
								<mx:HBox>
									<mx:Label id="queryType3KeyWordLabel" text="Type3" styleName="titre" />
									<mx:Button label="+" id="QueryType3KeyWordAddButton" click="selectKeyWordForQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryType3KeyWordGrid" dataProvider="{_queryType3KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_queryType3KeyWordsDataProvider.length}" >
									<mx:columns>
										<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
						</mx:VBox>
						
						
						<!-- ONGLET QUERY -->
						<!-- Carte d'une query -->
						
						<mx:HBox label="Carte de la question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
						
							<mx:VBox width="100%">
								<!-- Type de carte d'une query -->
								<mx:HBox>
									<mx:Label text="Type de la carte" styleName="titre" />
									<mx:Button label="+" id="selectQueryMapTypeButton" click="selectMapTypeForQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryMapTypeGrid" dataProvider="{_queryMapTypeDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_queryMapTypeDataProvider.length}" >
									<mx:columns>
										<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										<mx:DataGridColumn dataField="type" itemRenderer="admin.renderers.ContentRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
								
								<mx:Spacer height="15">
								</mx:Spacer>
								
								<!-- Media de la carte d'une query -->
								<mx:HBox>
									<mx:Label text="Media de la carte" styleName="titre" />
									<mx:Button label="+" id="addQueryMediaMapButton" click="addQueryMediaMap(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryMediaMapGrid" dataProvider="{_queryMediaMapDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_queryMediaMapDataProvider.length}" >
									<mx:columns>
										<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
										<mx:DataGridColumn dataField="titre" itemRenderer="admin.renderers.TitleRenderer" />
										<mx:DataGridColumn dataField="content" itemRenderer="admin.renderers.MediaRenderer" />
										<mx:DataGridColumn width="25" itemRenderer="admin.renderers.ValidCheckBoxRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
										<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
								
								<mx:Spacer height="15">
								</mx:Spacer>
								
								<mx:HBox>
									<mx:Label text="Google Maps : centre de la carte" styleName="titre" />
									<mx:Button label="+" id="addQueryCartoButton" click="addCartoToQuery(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryCartoGrid" dataProvider="{_queryMapPositionDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_queryMapPositionDataProvider.length}" >
									<mx:columns>
									    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									    <mx:DataGridColumn dataField="position" itemRenderer="admin.renderers.CartoRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
								
								<!-- Niveau de zoom de la carte d'une query -->
								<mx:HBox>
									<mx:Label text="Google Maps : zoom de la carte" styleName="titre" />
									<mx:Button label="+" id="addQueryMapZoomButton" click="addQueryMapZoom(event)" styleName="addButton" />				
								</mx:HBox>
								<mx:DataGrid width="100%" id="queryMapZoomGrid" dataProvider="{_queryMapZoomDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_queryMapZoomDataProvider.length}" >
									<mx:columns>
									    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									    <mx:DataGridColumn dataField="type" itemRenderer="admin.renderers.ContentRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
									    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
									</mx:columns>
								</mx:DataGrid>
							</mx:VBox>
							
							<mx:VBox width="200" height="100%" styleName="VBoxDebug">
								<mx:Label text="" styleName="titre" />
								<component:CustomMediaPlayer id="mediaMapPlayer" width="173" height="132" />
								<mx:Button label="upload" id="uploadQueryMediaMapButton" click="uploadQueryMediaMap(event)" styleName="addButton" />				
							</mx:VBox>
							
						</mx:HBox>

						
						<!-- ONGLET QUERY -->
						<!-- Datas -->
						
						<mx:VBox label="Données associées à la question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
							
							<mx:HBox>
								<mx:Label text="Type de metadonnées" styleName="titre" />
								<mx:Button label="+" id="addDataTypeToQueryButton" click="addDataTypeToQuery(event)" styleName="addButton" />				
							</mx:HBox>
							<mx:DataGrid width="100%" id="queryDataTypeGrid" dataProvider="{_queryDataTypeDataProvider}" rowHeight="28" variableRowHeight="false" rowCount="{_queryDataTypeDataProvider.length}" >
								<mx:columns>
									<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									<mx:DataGridColumn dataField="name" itemRenderer="admin.renderers.NameRenderer" />
									<mx:DataGridColumn dataField="type" itemRenderer="admin.renderers.ContentRenderer" />
									<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
									<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
								</mx:columns>
							</mx:DataGrid>
							
						</mx:VBox>

						
						<!-- ONGLET QUERY -->
						<!-- Administrateur associé à la query -->
						
						<mx:VBox label="Administrateur associé à la question" width="100%" height="100%" paddingLeft="5" paddingRight="5">
							<mx:HBox>
								<mx:Label text="Administrateur" styleName="titre" />
								<mx:Button label="+" id="selectUserForQueryButton" click="selectUserForQuery(event)" styleName="addButton" />				
							</mx:HBox>
							<mx:DataGrid width="100%" id="queryUsersGrid" dataProvider="{_queryUsersDataProvider}" variableRowHeight="true" rowCount="{_queryUsersDataProvider.length}" >
								<mx:columns>
									<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
									<mx:DataGridColumn dataField="pseudo" itemRenderer="admin.renderers.UserPseudoRenderer" color="#FF0000" />
									<mx:DataGridColumn dataField="firstName" itemRenderer="admin.renderers.UserFirstNameRenderer" />
									<mx:DataGridColumn dataField="lastName" itemRenderer="admin.renderers.UserLastNameRenderer" />
									<mx:DataGridColumn dataField="role" itemRenderer="admin.renderers.UserRoleRenderer"  color="#FF0000" />
									<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
								</mx:columns>
							</mx:DataGrid>
						</mx:VBox>
						
					</mx:TabNavigator>
					
				</mx:VBox>
			</mx:HBox>

			
			<!-- ONGLET GENERAL -->
			<!-- Metadonnées : mots-clés -->

			<mx:VBox label= "Mots-clés" width="100%" height="100%" paddingLeft="5" paddingRight="5">
				<mx:VBox id="keyWordVBox" width="100%">
					<mx:HBox>
						<mx:Label text="Mots-clés" styleName="titre" />
						<mx:Button label="+" id="KeyWordAddButton" click="addKeyWord(event)" styleName="addButton" />				
					</mx:HBox>
					<mx:DataGrid width="100%" id="keyWordsGrid" dataProvider="{_keyWordsDataProvider}" variableRowHeight="false" rowCount="{_keyWordsDataProvider.length}" >
						<mx:columns>
						    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
						    <mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
						    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
						    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
				
				<!-- Mots-clé BBC -->
				<mx:VBox id="otherTypesKeyWordVBox" width="100%" paddingTop="20">
					<mx:HBox>
						<mx:Label id="type1KeyWordLabel" text="Type1" styleName="titre" />
						<mx:Button label="+" id="Type1KeyWordAddButton" click="addKeyWord(event)" styleName="addButton" />				
					</mx:HBox>
					<mx:DataGrid width="100%" id="type1KeyWordsGrid" dataProvider="{_type1KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_type1KeyWordsDataProvider.length}" >
						<mx:columns>
							<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
							<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
						</mx:columns>
					</mx:DataGrid>
					
					<mx:HBox>
						<mx:Label id="type2KeyWordLabel" text="Type2" styleName="titre" />
						<mx:Button label="+" id="Type2KeyWordAddButton" click="addKeyWord(event)" styleName="addButton" />				
					</mx:HBox>
					<mx:DataGrid width="100%" id="type2KeyWordsGrid" dataProvider="{_type2KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_type2KeyWordsDataProvider.length}" >
						<mx:columns>
							<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
							<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
						</mx:columns>
					</mx:DataGrid>
					
					<mx:HBox>
						<mx:Label id="type3KeyWordLabel" text="Type3" styleName="titre" />
						<mx:Button label="+" id="Type3KeyWordAddButton" click="addKeyWord(event)" styleName="addButton" />				
					</mx:HBox>
					<mx:DataGrid width="100%" id="type3KeyWordsGrid" dataProvider="{_type3KeyWordsDataProvider}" variableRowHeight="false" rowCount="{_type3KeyWordsDataProvider.length}" >
						<mx:columns>
							<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
							<mx:DataGridColumn dataField="mot-clé" itemRenderer="admin.renderers.ContentRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
							<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
						</mx:columns>
					</mx:DataGrid>
				</mx:VBox>
			</mx:VBox>
			

			<!-- ONGLET GENERAL -->
			<!-- Metadonnées : type de données, cartes -->
				
			<mx:VBox label= "Type de données" width="100%" height="100%" paddingLeft="5" paddingRight="5">
				
				<mx:HBox>
					<mx:Label text="Types de carte" styleName="titre" />
					<mx:Button label="+" id="addMapTypeButton" click="addMapType(event)" styleName="addButton" />				
				</mx:HBox>
				<mx:DataGrid width="100%"  height="50%" id="mapTypesGrid" dataProvider="{_mapTypesDataProvider}" variableRowHeight="false">
					<mx:columns>
					    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
					    <mx:DataGridColumn dataField="type" itemRenderer="admin.renderers.ContentRenderer" />
					    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
					    <mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
					</mx:columns>
				</mx:DataGrid>
				
				<mx:HBox visible="true" >
					<mx:Label text="Types de données" styleName="titre" />
					<mx:Button label="+" id="addDataTypeButton" click="addDataType(event)" styleName="addButton" />				
				</mx:HBox>
				<mx:DataGrid visible="true" width="100%"  height="50%" id="dataTypesGrid" dataProvider="{_dataTypesDataProvider}" variableRowHeight="false">
					<mx:columns>
						<mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
						<mx:DataGridColumn dataField="name" itemRenderer="admin.renderers.NameRenderer" />
						<mx:DataGridColumn dataField="type" itemRenderer="admin.renderers.ContentRenderer" />
						<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
						<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
					</mx:columns>
				</mx:DataGrid>
				
			</mx:VBox>
			
			
			<!-- ONGLET GENERAL -->
			<!-- Utilisateurs -->
				
			<mx:VBox label= "Utilisateurs" width="100%" height="100%" paddingLeft="5" paddingRight="5">
				<mx:HBox width="100%" height="100%" styleName="VBoxDebug">
					<mx:VBox width="100%" height="100%">
						<mx:HBox>
							<mx:Label text="Utilisateurs" styleName="titre" />
							<mx:Button label="+" id="addUserButton" click="addUser(event)" styleName="addButton" />				
						</mx:HBox>
						<mx:DataGrid width="100%"  height="100%" id="usersGrid" dataProvider="{_usersDataProvider}" variableRowHeight="false">
							<mx:columns>
							    <mx:DataGridColumn dataField="id" width="30" color="#CCCCCC" />
								<mx:DataGridColumn width="25" itemRenderer="admin.renderers.BanCheckBoxRenderer" />
								<mx:DataGridColumn dataField="pseudo" itemRenderer="admin.renderers.UserPseudoRenderer" color="#FF0000" />
								<mx:DataGridColumn dataField="firstName" itemRenderer="admin.renderers.UserFirstNameRenderer" />
								<mx:DataGridColumn dataField="lastName" itemRenderer="admin.renderers.UserLastNameRenderer" />
								<mx:DataGridColumn dataField="role" itemRenderer="admin.renderers.UserRoleRenderer" color="#FF0000" />
								<mx:DataGridColumn width="35" itemRenderer="admin.renderers.EditButtonRenderer" />
								<mx:DataGridColumn width="35" itemRenderer="admin.renderers.DeleteButtonRenderer" />
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox width="200" height="100%" styleName="VBoxDebug">
						<mx:Label text="" styleName="titre" />
						<component:CustomMediaPlayer id="userAvatarPlayer" width="173" height="132" />
						<mx:Button label="upload" id="uploadMediaUserButton" click="uploadMediaUser(event)" styleName="addButton" />				
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
			
		</mx:TabNavigator>
		
	</mx:HBox>
	
</mx:Panel>

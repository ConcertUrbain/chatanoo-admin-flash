package org.concert_urbain.touratour{	import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.geom.Rectangle;	import flash.text.TextFormat;		import org.concert_urbain.touratour.api.vos.*;	import org.concert_urbain.touratour.api.vos.medias.*;	import org.concert_urbain.utils.IMediaViewer;	import org.concert_urbain.utils.ImageViewer;	import org.concert_urbain.utils.MediaEvent;	import org.concert_urbain.utils.SoundViewer;	import org.concert_urbain.utils.TextViewer;	import org.concert_urbain.utils.VideoViewer;	import org.concert_urbain.utils.ViewerEvents;			/*		Class concernant le player video (le cadre en haut du player flash avec les votes/commentaires).	*/		public class MediaViewer extends Sprite	{			public static const MEDIA_END:String = "org.concert_urbain.dring.mediaViewer.End";		public static const MEDIA_PROGRESS:String = "org.concert_urbain.dring.mediaViewer.Progress";		public static const MEDIA_LOAD_PROGRESS:String = "org.concert_urbain.dring.mediaViewer.LoadProgress";		public static const MEDIA_RESUME:String = "org.concert_urbain.dring.mediaViewer.Resume";		public static const MEDIA_PAUSE:String = "org.concert_urbain.dring.mediaViewer.Pause";		public static const MEDIA_CHANGE:String = "org.concert_urbain.dring.mediaViewer.Change";						private var playerWidth:Number = 173;		private var playerHeight:Number = 130;		private var playerRect:Rectangle;		private var isOpen:Boolean = false;			public var currentItemVO:Item;		public var currentMediaViewer:IMediaViewer;		public var currentMediaURL:String;				public var typeContent:String		public var textFormat:TextFormat;		public var baseURL:String = "";		public var autoPlay:Boolean = true;				public var imageDisplayTimeOut:Number = 0;				 		public function MediaViewer()		{			super();						setSize(playerWidth, playerHeight);						textFormat = new TextFormat();			textFormat.font = "Arial";			textFormat.size = 15;			textFormat.color = 0xFFFFFF;		}				public function setSize(w:Number, h:Number):void		{			playerWidth = w;			playerHeight = h;						// Rectangle du player (limite les dimensions des médias)			playerRect = new Rectangle(0, 0, playerWidth, playerHeight);						//drawBackground();		}				public function drawBackground():void		{			var g:Graphics = graphics;			g.beginFill(0x715591); // Violet			g.drawRect(0, 0, playerWidth, playerHeight);			g.endFill();		}						//		// Médias :		//						public function displayFirstMedia(mediasByTypeOfItem:Array):void		{			clear();						if (mediasByTypeOfItem is Array)			{				var i:uint;				var n:uint = mediasByTypeOfItem.length								for (i=0; i<n; i++)				{					displayMedia(mediasByTypeOfItem[i]);					break;				}			}		}						public function displayMedia(mediaVO:Object):void		{			if (mediaVO is PictureMedia)			{				displayPicture(mediaVO as PictureMedia);			}			else if (mediaVO is VideoMedia)			{				displayVideo(mediaVO as VideoMedia);			}			else if (mediaVO is SoundMedia)			{				displaySound(mediaVO as SoundMedia);			}			else if (mediaVO is TextMedia)			{				displayText(mediaVO as TextMedia);			}		}						public function displayPicture(mediaVO:PictureMedia):void		{			clear();						currentMediaURL = mediaVO.url;						if (currentMediaURL && (currentMediaURL.length > 0))			{				var image:ImageViewer = new ImageViewer(baseURL + currentMediaURL + ".jpg", playerRect, imageDisplayTimeOut);				image.addEventListener(ViewerEvents.MEDIA_LOAD_PROGRESS, mediaLoadProgress, false, 1, true);				image.addEventListener(ViewerEvents.MEDIA_PROGRESS, mediaProgress, false, 1, true);				image.addEventListener(ViewerEvents.MEDIA_END, mediaPlayed, false, 1, true);				image.addEventListener(ViewerEvents.MEDIA_LOAD_ERROR, mediaLoadError, false, 1, true);								addChild(image);								currentMediaViewer = image as IMediaViewer;								dispatchEvent(new MediaEvent(MEDIA_CHANGE, MediaTypes.PICTURE, currentMediaURL, true));			}		}					private function mediaLoadError (e:Event):void		{			trace("Erreur chargement image", baseURL + currentMediaURL + ".jpg");		}				public function displaySound(mediaVO:SoundMedia):void		{			clear();						currentMediaURL = mediaVO.url;						if (currentMediaURL && (currentMediaURL.length > 0))			{				var sound:SoundViewer = new SoundViewer(baseURL + currentMediaURL + ".mp3", playerRect);				sound.addEventListener(ViewerEvents.MEDIA_LOAD_PROGRESS, mediaLoadProgress, false, 1, true);				sound.addEventListener(ViewerEvents.MEDIA_PROGRESS, mediaProgress, false, 1, true);				sound.addEventListener(ViewerEvents.MEDIA_END, mediaPlayed, false, 1, true);				sound.addEventListener(ViewerEvents.MEDIA_LOAD_ERROR, mediaLoadError, false, 1, true);				addChild(sound);								currentMediaViewer = sound as IMediaViewer;								dispatchEvent(new MediaEvent(MEDIA_CHANGE, MediaTypes.SOUND, currentMediaURL, true));			}		}					public function displayText(mediaVO:TextMedia):void		{			clear();						currentMediaURL = "";						var texte:TextViewer = new TextViewer(mediaVO.content, false, playerRect);			texte.textFormat = textFormat;			texte.addEventListener(ViewerEvents.MEDIA_END, mediaPlayed, false, 1, true);			texte.addEventListener(ViewerEvents.MEDIA_PROGRESS, mediaProgress, false, 1, true);			texte.textField.textColor = 0xFFFFFF;			addChild(texte);						currentMediaViewer = texte as IMediaViewer;						dispatchEvent(new MediaEvent(MEDIA_CHANGE, MediaTypes.TEXT, currentMediaURL, true));		}					public function displayVideo(mediaVO:VideoMedia):void		{			clear();						currentMediaURL = mediaVO.url;						if (currentMediaURL && (currentMediaURL.length > 0))			{				var video:VideoViewer = new VideoViewer(baseURL + currentMediaURL + ".flv", playerRect);				video.autoPlay = autoPlay;				video.addEventListener(ViewerEvents.MEDIA_END, mediaPlayed, false, 1, true);				video.addEventListener(ViewerEvents.MEDIA_LOAD_PROGRESS, mediaLoadProgress, false, 1, true);				video.addEventListener(ViewerEvents.MEDIA_PROGRESS, mediaProgress, false, 1, true);				video.addEventListener(ViewerEvents.MEDIA_LOAD_ERROR, mediaLoadError, false, 1, true);								// Play/Pause				video.addEventListener(MouseEvent.CLICK, toggleMedia, false, 1, true);					addChild(video);								currentMediaViewer = video as IMediaViewer;								dispatchEvent(new MediaEvent(MEDIA_CHANGE, MediaTypes.VIDEO, currentMediaURL, true));			}		}				public function clear():void		{			// Suppression des précédents contenus			var child:DisplayObject;			while (numChildren > 0)			{				child = getChildAt(0);				if (child is IMediaViewer) IMediaViewer(child).close(); 				removeChildAt(0);			}		}				//		// Fonctions MediaPlayer		//				public function playMedia():void		{			if (currentMediaViewer is VideoViewer) {				VideoViewer(currentMediaViewer).resume();			}					}				public function pauseMedia():void		{			if (currentMediaViewer is VideoViewer) {				VideoViewer(currentMediaViewer).pause();			}					}				public function stopMedia():void		{			if (currentMediaViewer is VideoViewer) {				VideoViewer(currentMediaViewer).stop();			}					}				public function seek(t:Number):void		{			if (currentMediaViewer is VideoViewer) {				VideoViewer(currentMediaViewer).seek(t);			}					}				public function seekPercent(p:Number):void		{			if (currentMediaViewer is VideoViewer) {				VideoViewer(currentMediaViewer).seekPercent(p);			}		}					public function toggleMedia(e:MouseEvent = null):void		{			if (currentMediaViewer is VideoViewer)			{				VideoViewer(currentMediaViewer).togglePlayPause();								var eventName:String = VideoViewer(currentMediaViewer).isPlaying ? MEDIA_RESUME : MEDIA_PAUSE;				dispatchEvent(new Event(eventName, true));			}		}		public function get isPlaying():Boolean		{			if (currentMediaViewer is VideoViewer)			{				return VideoViewer(currentMediaViewer).isPlaying			}						// TO DO : sound						return false;		}				//		// Media Playback		//				private function mediaProgress(e:ProgressEvent):void		{			var evt:ProgressEvent = new ProgressEvent(MEDIA_PROGRESS, false, false, e.bytesLoaded, e.bytesTotal);			dispatchEvent(evt);		}				private function mediaLoadProgress(e:ProgressEvent):void		{			var evt:ProgressEvent = new ProgressEvent(MEDIA_LOAD_PROGRESS, false, false, e.bytesLoaded, e.bytesTotal);			dispatchEvent(evt);		}				private function mediaPlayed(e:Event):void		{			e.target.removeEventListener(ViewerEvents.MEDIA_END, mediaPlayed);			e.target.removeEventListener(ViewerEvents.MEDIA_PROGRESS, mediaProgress);			e.target.removeEventListener(ViewerEvents.MEDIA_LOAD_PROGRESS, mediaLoadProgress);			e.target.removeEventListener(ViewerEvents.MEDIA_LOAD_ERROR, mediaLoadError);						e.target.removeEventListener(MouseEvent.CLICK, toggleMedia);						dispatchEvent(new Event(MEDIA_END));		}				public function close():void		{			if (currentMediaViewer is IMediaViewer) currentMediaViewer.close();		}	}}